
package UI;

import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import DB.DBConnector;
import OrderingSystem.SessionManager;
import UI.BedsDashboard;
import javax.swing.JTextField;
import java.sql.Statement;

public class BedsDashboard1 extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;


     
    public BedsDashboard1() {
        initComponents();
        DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
         loadAllProductStocks();
    }
    private void loadStockIntoField(String productName, JTextField stockField) {
    try {
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, productName);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            int stock = rs.getInt("Stock");
            stockField.setText(String.valueOf(stock)); 
        } else {
            stockField.setText("N/A");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Failed to load stock: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void loadAllProductStocks() {
    loadStockIntoField("Plain Bed", PBS);      
    loadStockIntoField("Crib Bed", CBS);
    loadStockIntoField("Plain Single Bed", SBS);
   
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        CBAC = new javax.swing.JButton();
        CBPC = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        PBQPC = new javax.swing.JButton();
        PBAC = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        PBS = new javax.swing.JTextField();
        CBS = new javax.swing.JTextField();
        txtPBQ = new javax.swing.JTextField();
        txtCBQ = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        SBPC = new javax.swing.JButton();
        PSBAC = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSBQ = new javax.swing.JTextField();
        ExitButton = new javax.swing.JButton();
        SBS = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 153, 0));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Quantity");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 410, 80, -1));

        CBAC.setBackground(new java.awt.Color(101, 101, 101));
        CBAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        CBAC.setForeground(new java.awt.Color(255, 255, 255));
        CBAC.setText("Add to Cart");
        CBAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBACActionPerformed(evt);
            }
        });
        jPanel4.add(CBAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 520, 180, 50));

        CBPC.setBackground(new java.awt.Color(101, 101, 101));
        CBPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        CBPC.setForeground(new java.awt.Color(255, 255, 255));
        CBPC.setText("Proceed to Checkout");
        CBPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBPCActionPerformed(evt);
            }
        });
        jPanel4.add(CBPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 460, 180, 50));

        jTextArea6.setEditable(false);
        jTextArea6.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea6.setColumns(20);
        jTextArea6.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea6.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea6.setRows(5);
        jTextArea6.setText("Crib Bed\nA charming crib bed with slatted sides.\nPrice: P750.00\nMaterial: Wood\nColor: Brown");
        jScrollPane6.setViewportView(jTextArea6);

        jPanel4.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 300, 240, -1));

        jTextArea7.setEditable(false);
        jTextArea7.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea7.setColumns(20);
        jTextArea7.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea7.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea7.setRows(5);
        jTextArea7.setText("Plain Bed\nA simple, sturdy wooden bed frame.\nPrice: P500.00\nMaterial: Wood\nColor: White and Brown");
        jScrollPane7.setViewportView(jTextArea7);

        jPanel4.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, -1, -1));

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Quantity");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 80, -1));

        PBQPC.setBackground(new java.awt.Color(101, 101, 101));
        PBQPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        PBQPC.setForeground(new java.awt.Color(255, 255, 255));
        PBQPC.setText("Proceed to Checkout");
        PBQPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PBQPCActionPerformed(evt);
            }
        });
        jPanel4.add(PBQPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 460, 180, 50));

        PBAC.setBackground(new java.awt.Color(101, 101, 101));
        PBAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        PBAC.setForeground(new java.awt.Color(255, 255, 255));
        PBAC.setText("Add to Cart");
        PBAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PBACActionPerformed(evt);
            }
        });
        jPanel4.add(PBAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 520, 180, 50));

        jLabel13.setBackground(new java.awt.Color(255, 153, 0));
        jLabel13.setFont(new java.awt.Font("Serif", 3, 36)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Children's Bed");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, -1, -1));
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Beds/Children Beds.jpg"))); // NOI18N
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 230, 180));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Beds/Childrens Bed2.jpg"))); // NOI18N
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 110, 230, 180));

        PBS.setEditable(false);
        PBS.setBackground(new java.awt.Color(230, 222, 210));
        PBS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        PBS.setForeground(new java.awt.Color(60, 60, 60));
        jPanel4.add(PBS, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 400, 50, 50));

        CBS.setEditable(false);
        CBS.setBackground(new java.awt.Color(230, 222, 210));
        CBS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CBS.setForeground(new java.awt.Color(60, 60, 60));
        CBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBSActionPerformed(evt);
            }
        });
        jPanel4.add(CBS, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 400, 50, 50));

        txtPBQ.setBackground(new java.awt.Color(230, 222, 210));
        txtPBQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtPBQ.setForeground(new java.awt.Color(60, 60, 60));
        jPanel4.add(txtPBQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 400, 50, 50));

        txtCBQ.setBackground(new java.awt.Color(230, 222, 210));
        txtCBQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtCBQ.setForeground(new java.awt.Color(60, 60, 60));
        jPanel4.add(txtCBQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 400, 50, 50));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bf1.png"))); // NOI18N
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 600));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 580, 600));

        jPanel3.setBackground(new java.awt.Color(255, 153, 0));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        jTextArea5.setEditable(false);
        jTextArea5.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea5.setColumns(20);
        jTextArea5.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea5.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea5.setRows(5);
        jTextArea5.setText("Plain Single Bed\nA minimalist single bed.\nPrice: P650.00\nMaterial: Wood\nColor: Brown");
        jScrollPane5.setViewportView(jTextArea5);

        jPanel3.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, -1, -1));

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Quantity");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 410, 80, -1));

        SBPC.setBackground(new java.awt.Color(101, 101, 101));
        SBPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        SBPC.setForeground(new java.awt.Color(255, 255, 255));
        SBPC.setText("Proceed to Checkout");
        SBPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SBPCActionPerformed(evt);
            }
        });
        jPanel3.add(SBPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 460, 180, 50));

        PSBAC.setBackground(new java.awt.Color(101, 101, 101));
        PSBAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        PSBAC.setForeground(new java.awt.Color(255, 255, 255));
        PSBAC.setText("Add to Cart");
        PSBAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSBACActionPerformed(evt);
            }
        });
        jPanel3.add(PSBAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 520, 180, 50));

        jLabel10.setBackground(new java.awt.Color(255, 153, 0));
        jLabel10.setFont(new java.awt.Font("Serif", 3, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("  Single Bed");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Beds/Single Bed.jpg"))); // NOI18N
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, 230, 180));

        txtSBQ.setBackground(new java.awt.Color(230, 222, 210));
        txtSBQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtSBQ.setForeground(new java.awt.Color(60, 60, 60));
        jPanel3.add(txtSBQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 400, 50, 50));

        ExitButton.setBackground(new java.awt.Color(180, 100, 100));
        ExitButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(255, 255, 255));
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        jPanel3.add(ExitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 540, -1, 50));

        SBS.setEditable(false);
        SBS.setBackground(new java.awt.Color(230, 222, 210));
        SBS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SBS.setForeground(new java.awt.Color(60, 60, 60));
        SBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SBSActionPerformed(evt);
            }
        });
        jPanel3.add(SBS, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 400, 50, 50));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bf1.png"))); // NOI18N
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 600));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 60, 580, 600));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 700));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CBACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBACActionPerformed
        String ProductName = "Crib Bed";
        int price = 3500;
        int Quantity;
        
        try {
        Quantity = Integer.parseInt(txtCBQ.getText());
        
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

        
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

        
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

        
        CBS.setText(String.valueOf(newStock));
        txtCBQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_CBACActionPerformed

    private void CBPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBPCActionPerformed
         String ProductName = "Crib Bed";
        int price = 750;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(txtCBQ.getText());
        double TotalPrice = Quantity * price;

          
      
        int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

    if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { // Pay Now
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
        // Validate GCash Number (must be 11 digits)
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
       JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}

    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    txtCBQ.setText("");
    CBS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_CBPCActionPerformed

    private void PBQPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PBQPCActionPerformed
        String ProductName = "Plain Bed";
        int price = 500;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(txtPBQ.getText());
        double TotalPrice = Quantity * price;
   
     
        int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

   if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
        
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
       JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}


    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    txtPBQ.setText("");
    PBS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_PBQPCActionPerformed

    private void PBACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PBACActionPerformed
        String ProductName = "Plain Bed";
        int price = 3500;
        int Quantity;
        
        try {
        Quantity = Integer.parseInt(txtPBQ.getText());
        
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

       
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

        
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

        
        PBS.setText(String.valueOf(newStock));
        txtPBQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_PBACActionPerformed

    private void SBPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SBPCActionPerformed
         String ProductName = "Plain Single Bed";
        int price = 650;
        int Quantity;
        String Status = "Pending";
        try {
        Quantity = Integer.parseInt(txtSBQ.getText());
        double TotalPrice = Quantity * price;

          
     
          int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

   if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
        
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}


    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    txtSBQ.setText("");
    SBS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_SBPCActionPerformed

    private void PSBACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSBACActionPerformed
         String ProductName = "Plain Single Bed";
        int price = 650;
        int Quantity;
         try {
        Quantity = Integer.parseInt(txtSBQ.getText());
       
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

       
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

        
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

        
        SBS.setText(String.valueOf(newStock));
        txtSBQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_PSBACActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
      BedsDashboard obj = new BedsDashboard();
      obj.setVisible(true);
      dispose();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void CBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBSActionPerformed

    private void SBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SBSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SBSActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BedsDashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BedsDashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BedsDashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BedsDashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BedsDashboard1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CBAC;
    private javax.swing.JButton CBPC;
    private javax.swing.JTextField CBS;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton PBAC;
    private javax.swing.JButton PBQPC;
    private javax.swing.JTextField PBS;
    private javax.swing.JButton PSBAC;
    private javax.swing.JButton SBPC;
    private javax.swing.JTextField SBS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextField txtCBQ;
    private javax.swing.JTextField txtPBQ;
    private javax.swing.JTextField txtSBQ;
    // End of variables declaration//GEN-END:variables
}
