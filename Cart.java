
package UI;
import DB.DBConnector;
import OrderingSystem.SessionManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Jessa Mae Codizal
 */
public class Cart extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;
private final int customerId;

    /**
     * Creates new form Cart
     */
    public Cart() {
        initComponents();
         DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
        this.customerId = SessionManager.getCustomerID();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        paymentbutton = new javax.swing.JButton();
        editbutton = new javax.swing.JButton();
        deletebutton = new javax.swing.JButton();
        HomeButton1 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(140, 122, 107));
        jTable1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cart ID", "Product Name", "Price", "Quantity", "Total Price"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 140, 1070, 530));

        jLabel2.setFont(new java.awt.Font("SansSerif", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DYEY EN DI'S FURNITURE HAVEN");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, -1, -1));

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("YOUR ADD TO CART!");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 80, -1, -1));

        jPanel3.setBackground(new java.awt.Color(140, 122, 107));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel15.setText("    HAVEN");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 110, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel16.setText("DYEY");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 60, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel17.setText("EN");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 40, 30, -1));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel18.setText("DI'S");
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 60, -1));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel19.setText("FURNITURE");
        jPanel3.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 110, -1));

        jButton7.setBackground(new java.awt.Color(101, 101, 101));
        jButton7.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("VIEW CART");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 180, 50));

        paymentbutton.setBackground(new java.awt.Color(101, 101, 101));
        paymentbutton.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        paymentbutton.setForeground(new java.awt.Color(255, 255, 255));
        paymentbutton.setText("PAYMENT");
        paymentbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentbuttonActionPerformed(evt);
            }
        });
        jPanel3.add(paymentbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 180, 50));

        editbutton.setBackground(new java.awt.Color(101, 101, 101));
        editbutton.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        editbutton.setForeground(new java.awt.Color(255, 255, 255));
        editbutton.setText("EDIT");
        editbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editbuttonActionPerformed(evt);
            }
        });
        jPanel3.add(editbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 180, 50));

        deletebutton.setBackground(new java.awt.Color(101, 101, 101));
        deletebutton.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        deletebutton.setForeground(new java.awt.Color(255, 255, 255));
        deletebutton.setText("DELETE");
        deletebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebuttonActionPerformed(evt);
            }
        });
        jPanel3.add(deletebutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 180, 50));

        HomeButton1.setBackground(new java.awt.Color(180, 100, 100));
        HomeButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        HomeButton1.setForeground(new java.awt.Color(255, 255, 255));
        HomeButton1.setText("EXIT");
        HomeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(HomeButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 180, 50));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 700));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 1180, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void paymentbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentbuttonActionPerformed
                                               
         try {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select an order to pay.");
            return;
        }

        int cartId = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString());
        String productName = jTable1.getValueAt(selectedRow, 1).toString();

        pst = conn.prepareStatement("SELECT ProductName, Price, Quantity FROM addtocart WHERE CartID = ? AND ProductName = ?");
        pst.setInt(1, cartId);
        pst.setString(2, productName);
        rst = pst.executeQuery();

        if (!rst.next()) {
            JOptionPane.showMessageDialog(null, "Selected cart item not found.");
            return;
        }

        String ProductName = rst.getString("ProductName");
        int Quantity = rst.getInt("Quantity");
        double Price = rst.getDouble("Price");
        double TotalPrice = Price * Quantity;
        String Status = "Pending";
        double finalTotal = TotalPrice;
        double shippingFee = 0, change = 0, amountGiven = 0;
        String paymentStatus = "Unpaid";
        String gcashName = "", gcashNumber = "";

        int confirm = JOptionPane.showConfirmDialog(this,
                "Product: " + ProductName +
                "\nQuantity: " + Quantity +
                "\nTotal Price: P" + String.format("%.2f", TotalPrice) +
                "\n\nDo you confirm this order?",
                "Confirm Order", JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) return;

        String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
        if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Delivery address is required to proceed.", "Missing Address", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String[] paymentOptions = { "Cash on Delivery", "Gcash" };
        String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method",
                JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);

        if (paymentMethod == null) return;

        if (paymentMethod.equals("Gcash")) {
            String[] gcashOptions = { "Pay Now", "Pay Later" };
            int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

            if (gcashChoice == 0) {
                gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
                gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");

                if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
                    JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
                if (gcashName == null || amountStr == null) return;

                amountGiven = Double.parseDouble(amountStr);
                if (amountGiven < TotalPrice) {
                    JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                change = amountGiven - TotalPrice;
                JOptionPane.showMessageDialog(this,
                        "Please send P" + String.format("%.2f", amountGiven) +
                        " to the Admin's GCash Number: 09358969415\n" +
                        "Then wait for admin verification.",
                        "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

                paymentStatus = "Unpaid";
            } else if (gcashChoice == 1) {
                paymentStatus = "Unpaid";
            } else {
                return;
            }
        } else {
            shippingFee = 50;
            finalTotal += shippingFee;
            paymentStatus = "Unpaid";
        }

        int customerID = SessionManager.getCustomerID();
        java.time.LocalDate today = java.time.LocalDate.now();
        java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

        int productID = 1; 
        String isVerified = "No"; 

        pst = conn.prepareStatement(
            "INSERT INTO orders (CustomerID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid, ProductID, IsVerified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setInt(3, Quantity);
        pst.setDouble(4, finalTotal);
        pst.setString(5, paymentMethod);
        pst.setString(6, deliveryAddress);
        pst.setString(7, Status);
        pst.setDate(8, orderDateSQL);
        pst.setString(9, paymentStatus);
        pst.setInt(10, productID);
        pst.setString(11, isVerified);

        int rowsInserted = pst.executeUpdate();
        if (rowsInserted > 0) {
            // Insert audit log before deleting cart item
            pst = conn.prepareStatement("INSERT INTO addtocart_audit_logs (CartID, ActionType, ActionTimeStamp) VALUES (?, ?, NOW())");
            pst.setInt(1, cartId);
            pst.setString(2, "Removed after Order");
            pst.executeUpdate();

            // Now delete from addtocart
            pst = conn.prepareStatement("DELETE FROM addtocart_audit_logs WHERE CartID = ?");
            pst.setInt(1, cartId);
            pst.executeUpdate();
            
            pst = conn.prepareStatement("DELETE FROM addtocart WHERE CartID = ? AND ProductName = ?");
            pst.setInt(1, cartId);
            pst.setString(2, ProductName);
            pst.executeUpdate();

            // Remove row from table
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.removeRow(selectedRow);

            java.time.LocalDate deliveryDate = today.plusDays(3);
            java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");

            String receipt = "Product Name: " + ProductName +
                    "\nQuantity: " + Quantity +
                    "\nPayment Method: " + paymentMethod +
                    "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

            if (paymentMethod.equals("Gcash")) {
                if (paymentStatus.equals("Paid")) {
                    receipt += "\nGcash Name: " + gcashName +
                            "\nGcash Number: " + gcashNumber +
                            "\nAmount Given: P" + String.format("%.2f", amountGiven) +
                            "\nChange: P" + String.format("%.2f", change);
                } else {
                    receipt += "\nPayment to be made via GCash upon confirmation.";
                }
            } else {
                receipt += "\nShipping Fee: P" + String.format("%.2f", shippingFee);
            }

            receipt += "\nTotal: P" + String.format("%.2f", finalTotal) +
                    "\nDelivery Address: " + deliveryAddress +
                    "\nOrder Date: " + today.format(formatter) +
                    "\nExpected Delivery Date: " + deliveryDate.format(formatter) +
                    "\nPayment Status: " + paymentStatus +
                    "\n\nExpected delivery in 3 days.";

            JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Purchase failed. Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException | NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
    }

    
    }//GEN-LAST:event_paymentbuttonActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
          String sql = "SELECT * FROM addtocart WHERE CustomerID = ?";

        try {
            PreparedStatement pst = conn.prepareStatement(sql);
             pst.setInt(1, customerId); 
            ResultSet rst = pst.executeQuery();

           
            DefaultTableModel model = new DefaultTableModel(
                new String[]{"Cart ID" ,"Product Name", "Price",  "Quantity", "TotalPrice"}, 0
            );

            while (rst.next()) {
                model.addRow(new Object[]{
                    rst.getInt("CartID"),
                    rst.getString("ProductName"),
                    rst.getDouble("Price"),
                    rst.getInt("Quantity"),
                    rst.getDouble("TotalPrice")
                    

                });
            }

            jTable1.setModel(model); 

            rst.close();
            pst.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    

   

    }//GEN-LAST:event_jButton7ActionPerformed

    private void editbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editbuttonActionPerformed
         int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to update quantity.");
        return;
    }

    int orderID = (int) jTable1.getValueAt(selectedRow, 0); 

    int newQuantity;
    try {
        newQuantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter new quantity:"));
        if (newQuantity <= 0) {
            JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.");
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity.");
        return;
    }

    try {
        String getProductSql = "SELECT a.Quantity, a.ProductName, p.Price, p.Stock FROM addtocart a INNER JOIN products p ON a.ProductName = p.ProductName WHERE a.CartID = ?";
        int oldQuantity = 0;
        String productName = "";
        double price = 0;
        int stock = 0;

        try (PreparedStatement productStmt = conn.prepareStatement(getProductSql)) {
            productStmt.setInt(1, orderID);
            try (ResultSet rs = productStmt.executeQuery()) {
                if (rs.next()) {
                    oldQuantity = rs.getInt("Quantity");
                    productName = rs.getString("ProductName");
                    price = rs.getDouble("Price");
                    stock = rs.getInt("Stock");
                } else {
                    JOptionPane.showMessageDialog(this, "Product information not found.");
                    return;
                }
            }
        }

        int quantityDifference = newQuantity - oldQuantity;
        int newStock = stock - quantityDifference;

        if (newStock < 0) {
            JOptionPane.showMessageDialog(this, "Not enough stock available.");
            return;
        }

        double newTotal = price * newQuantity;

      
        conn.setAutoCommit(false);

       
        String updateCartSql = "UPDATE addtocart SET Quantity = ?, TotalPrice = ? WHERE CartID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateCartSql)) {
            pstmt.setInt(1, newQuantity);
            pstmt.setDouble(2, newTotal);
            pstmt.setInt(3, orderID);
            pstmt.executeUpdate();
        }

       
        String updateStockSql = "UPDATE products SET Stock = ? WHERE ProductName = ?";
        try (PreparedStatement stockStmt = conn.prepareStatement(updateStockSql)) {
            stockStmt.setInt(1, newStock);
            stockStmt.setString(2, productName);
            stockStmt.executeUpdate();
        }

       
        conn.commit();
        conn.setAutoCommit(true);

        jTable1.setValueAt(newQuantity, selectedRow, 3);  
        jTable1.setValueAt(newTotal, selectedRow, 4);    
        JOptionPane.showMessageDialog(this, "Quantity, total price, and stock updated successfully!");

    } catch (SQLException e) {
        try {
            conn.rollback();
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating quantity and stock.");
    }
    
    }//GEN-LAST:event_editbuttonActionPerformed

    private void deletebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebuttonActionPerformed
         int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        return;
    }

 
    int CartID = (int) jTable1.getValueAt(selectedRow, 0);

    
    int confirm = JOptionPane.showConfirmDialog(this,
        "Are you sure you want to delete Cart ID" + CartID + "?",
        "Confirm Delete", JOptionPane.YES_NO_OPTION);

    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    try {
        String deleteSQL = "DELETE FROM addtocart WHERE CartID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(deleteSQL)) {
            pstmt.setInt(1, CartID);
            int rowsDeleted = pstmt.executeUpdate();

            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Order deleted successfully.");

             
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.removeRow(selectedRow);

            } else {
                JOptionPane.showMessageDialog(this, "Order not found or could not be deleted.");
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting order.");
    }
    }//GEN-LAST:event_deletebuttonActionPerformed

    private void HomeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButton1ActionPerformed
        CustomerDashboard obj = new CustomerDashboard();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HomeButton1;
    private javax.swing.JButton deletebutton;
    private javax.swing.JButton editbutton;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton paymentbutton;
    // End of variables declaration//GEN-END:variables
}
