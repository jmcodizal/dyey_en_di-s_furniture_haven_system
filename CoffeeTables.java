
package UI;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import DB.DBConnector;
import OrderingSystem.SessionManager;
import UI.TablesChairs;
import javax.swing.JTextField;
import java.sql.Statement;
/**
 *
 * @author jessa
 */
public class CoffeeTables extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;
    /**
     * Creates new form CoffeeTables
     */
    public CoffeeTables() {
        initComponents();
        DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
        loadAllProductStocks();
    }
     private void loadStockIntoField(String productName, JTextField stockField) {
    try {
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, productName);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            int stock = rs.getInt("Stock");
            stockField.setText(String.valueOf(stock)); 
        } else {
            stockField.setText("N/A");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Failed to load stock: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void loadAllProductStocks() {
    loadStockIntoField("Round Modern Coffee Table", RMCTS);  
    loadStockIntoField("Squared Wooden Brown Coffee Table", SWBS);     
    loadStockIntoField("Black Coffee Table with Mirror", BCTS);
    loadStockIntoField("Round Wooden Dark Brown Coffee Table", RWDS);
   
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        RWDAC = new javax.swing.JButton();
        RWDPC = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        RMCTPC = new javax.swing.JButton();
        RMCTAC = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea9 = new javax.swing.JTextArea();
        SWBPC = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        SWBAC = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        BCTPC = new javax.swing.JButton();
        BCTAC = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        RWDS = new javax.swing.JTextField();
        RMCTS = new javax.swing.JTextField();
        SWBS = new javax.swing.JTextField();
        BCTS = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ExitButton = new javax.swing.JButton();
        RMCTQ = new javax.swing.JTextField();
        SWBQ = new javax.swing.JTextField();
        BCTQ = new javax.swing.JTextField();
        RWDQ = new javax.swing.JTextField();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea11 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 153, 0));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Quantity");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 420, 80, -1));

        RWDAC.setBackground(new java.awt.Color(101, 101, 101));
        RWDAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        RWDAC.setForeground(new java.awt.Color(255, 255, 255));
        RWDAC.setText("Add to Cart");
        RWDAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RWDACActionPerformed(evt);
            }
        });
        jPanel4.add(RWDAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 530, 180, 50));

        RWDPC.setBackground(new java.awt.Color(101, 101, 101));
        RWDPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        RWDPC.setForeground(new java.awt.Color(255, 255, 255));
        RWDPC.setText("Proceed to Checkout");
        RWDPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RWDPCActionPerformed(evt);
            }
        });
        jPanel4.add(RWDPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 470, 180, 50));

        jTextArea7.setEditable(false);
        jTextArea7.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea7.setColumns(20);
        jTextArea7.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea7.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea7.setRows(5);
        jTextArea7.setText("Squared Wooden Brown Coffee Table\nA sturdy wooden coffee table.\nPrice: P680.00\nMaterial: Wood\nColor: Brown");
        jScrollPane7.setViewportView(jTextArea7);

        jPanel4.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 310, -1, -1));

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Quantity");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 420, 80, -1));

        RMCTPC.setBackground(new java.awt.Color(101, 101, 101));
        RMCTPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        RMCTPC.setForeground(new java.awt.Color(255, 255, 255));
        RMCTPC.setText("Proceed to Checkout");
        RMCTPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RMCTPCActionPerformed(evt);
            }
        });
        jPanel4.add(RMCTPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 470, 180, 50));

        RMCTAC.setBackground(new java.awt.Color(101, 101, 101));
        RMCTAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        RMCTAC.setForeground(new java.awt.Color(255, 255, 255));
        RMCTAC.setText("Add to Cart");
        RMCTAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RMCTACActionPerformed(evt);
            }
        });
        jPanel4.add(RMCTAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 530, 180, 50));

        jLabel13.setBackground(new java.awt.Color(255, 153, 0));
        jLabel13.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        jTextArea8.setEditable(false);
        jTextArea8.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea8.setColumns(20);
        jTextArea8.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea8.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea8.setRows(5);
        jTextArea8.setText("Black Coffee Table with Mirror\nA coffee table with a clear glass top.\nPrice: P1200.00\nMaterial: Metal and Mirror\nColor: Black");
        jScrollPane8.setViewportView(jTextArea8);

        jPanel4.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 310, 250, -1));

        jTextArea9.setEditable(false);
        jTextArea9.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea9.setColumns(20);
        jTextArea9.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea9.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea9.setRows(5);
        jTextArea9.setText("Round Modern Coffee Table\nA sleek coffee table.\nPrice: P1700.00\nMaterial: Wood\nColor: Brown");
        jScrollPane9.setViewportView(jTextArea9);

        jPanel4.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 310, -1, -1));

        SWBPC.setBackground(new java.awt.Color(101, 101, 101));
        SWBPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        SWBPC.setForeground(new java.awt.Color(255, 255, 255));
        SWBPC.setText("Proceed to Checkout");
        SWBPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SWBPCActionPerformed(evt);
            }
        });
        jPanel4.add(SWBPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 470, 180, 50));

        jLabel14.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Quantity");
        jPanel4.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 420, 80, -1));

        SWBAC.setBackground(new java.awt.Color(101, 101, 101));
        SWBAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        SWBAC.setForeground(new java.awt.Color(255, 255, 255));
        SWBAC.setText("Add to Cart");
        SWBAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SWBACActionPerformed(evt);
            }
        });
        jPanel4.add(SWBAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 530, 180, 50));

        jLabel15.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Quantity");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 420, 80, -1));

        BCTPC.setBackground(new java.awt.Color(101, 101, 101));
        BCTPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BCTPC.setForeground(new java.awt.Color(255, 255, 255));
        BCTPC.setText("Proceed to Checkout");
        BCTPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCTPCActionPerformed(evt);
            }
        });
        jPanel4.add(BCTPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 470, 180, 50));

        BCTAC.setBackground(new java.awt.Color(101, 101, 101));
        BCTAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BCTAC.setForeground(new java.awt.Color(255, 255, 255));
        BCTAC.setText("Add to Cart");
        BCTAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCTACActionPerformed(evt);
            }
        });
        jPanel4.add(BCTAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 530, 180, 50));

        jLabel16.setBackground(new java.awt.Color(255, 153, 0));
        jLabel16.setFont(new java.awt.Font("Serif", 3, 36)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Coffee Tables");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, -1, -1));

        RWDS.setBackground(new java.awt.Color(230, 222, 210));
        RWDS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        RWDS.setForeground(new java.awt.Color(60, 60, 60));
        RWDS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RWDSActionPerformed(evt);
            }
        });
        jPanel4.add(RWDS, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 410, 50, 50));

        RMCTS.setBackground(new java.awt.Color(230, 222, 210));
        RMCTS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        RMCTS.setForeground(new java.awt.Color(60, 60, 60));
        RMCTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RMCTSActionPerformed(evt);
            }
        });
        jPanel4.add(RMCTS, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 410, 50, 50));

        SWBS.setBackground(new java.awt.Color(230, 222, 210));
        SWBS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SWBS.setForeground(new java.awt.Color(60, 60, 60));
        SWBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SWBSActionPerformed(evt);
            }
        });
        jPanel4.add(SWBS, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 410, 50, 50));

        BCTS.setBackground(new java.awt.Color(230, 222, 210));
        BCTS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BCTS.setForeground(new java.awt.Color(60, 60, 60));
        BCTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCTSActionPerformed(evt);
            }
        });
        jPanel4.add(BCTS, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 410, 50, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TablesChairs/Coffee Tables.jpg"))); // NOI18N
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 230, 180));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TablesChairs/Coffee Tables (2).jpg"))); // NOI18N
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, 230, 180));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TablesChairs/Coffee Tables (3).jpg"))); // NOI18N
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 110, 230, 180));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TablesChairs/Coffee Tables (4).jpg"))); // NOI18N
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 110, 230, 180));

        ExitButton.setBackground(new java.awt.Color(180, 100, 100));
        ExitButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(255, 255, 255));
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        jPanel4.add(ExitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 560, -1, 50));

        RMCTQ.setBackground(new java.awt.Color(230, 222, 210));
        RMCTQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        RMCTQ.setForeground(new java.awt.Color(60, 60, 60));
        RMCTQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RMCTQActionPerformed(evt);
            }
        });
        jPanel4.add(RMCTQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 410, 50, 50));

        SWBQ.setBackground(new java.awt.Color(230, 222, 210));
        SWBQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SWBQ.setForeground(new java.awt.Color(60, 60, 60));
        SWBQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SWBQActionPerformed(evt);
            }
        });
        jPanel4.add(SWBQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 410, 50, 50));

        BCTQ.setBackground(new java.awt.Color(230, 222, 210));
        BCTQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BCTQ.setForeground(new java.awt.Color(60, 60, 60));
        BCTQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCTQActionPerformed(evt);
            }
        });
        jPanel4.add(BCTQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 410, 50, 50));

        RWDQ.setBackground(new java.awt.Color(230, 222, 210));
        RWDQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        RWDQ.setForeground(new java.awt.Color(60, 60, 60));
        RWDQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RWDQActionPerformed(evt);
            }
        });
        jPanel4.add(RWDQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 410, 50, 50));

        jTextArea11.setEditable(false);
        jTextArea11.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea11.setColumns(20);
        jTextArea11.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea11.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea11.setRows(5);
        jTextArea11.setText("Round Wooden Dark Brown Coffee Table\nA practical coffee table.\nPrice: P850.00\nMaterial: Wood\nColor: Brown");
        jScrollPane11.setViewportView(jTextArea11);

        jPanel4.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 310, 250, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 630));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 1300, 630));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 700));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RWDACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RWDACActionPerformed
        String ProductName = "Round Wooden Dark Brown Coffee Table";
        int price = 850;
        int Quantity;
       
        try {
        Quantity = Integer.parseInt(RWDQ.getText());
       
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

       
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

      
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

       
        RWDS.setText(String.valueOf(newStock));
        RWDQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_RWDACActionPerformed

    private void RWDPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RWDPCActionPerformed
       String ProductName = "Round Wooden Dark Brown Coffee Table";
        int price = 850;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(RWDQ.getText());
        double TotalPrice = Quantity * price;

    
       int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

  if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { // Pay Now
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
        // Validate GCash Number (must be 11 digits)
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}


    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    RWDQ.setText("");
    RWDS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_RWDPCActionPerformed

    private void RMCTPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RMCTPCActionPerformed
        String ProductName = "Round Modern Coffee Table";
        int price = 680;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(RMCTQ.getText());
        double TotalPrice = Quantity * price;

   
        int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

   if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
       
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}


    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    RMCTQ.setText("");
    RMCTS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_RMCTPCActionPerformed

    private void RMCTACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RMCTACActionPerformed
        String ProductName = "Round Wooden Brown Coffee Table";
        int price = 1700;
        int Quantity;
        
       try {
        Quantity = Integer.parseInt(RMCTQ.getText());
        
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

       
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

       
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

        
        RMCTS.setText(String.valueOf(newStock));
        RMCTQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_RMCTACActionPerformed

    private void SWBPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SWBPCActionPerformed
        String ProductName = "Squared Wooden Brown Coffee Table";
        int price = 480;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(SWBQ.getText());
        double TotalPrice = Quantity * price;

      
        int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

   if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
        
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
       JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}

    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    SWBQ.setText("");
    SWBS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_SWBPCActionPerformed

    private void SWBACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SWBACActionPerformed
        String ProductName = "Squared Wooden Brown Coffee Table";
        int price = 680;
        int Quantity;
         
       try {
        Quantity = Integer.parseInt(SWBQ.getText());
       
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

        
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

      
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

        SWBS.setText(String.valueOf(newStock));
        SWBQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_SWBACActionPerformed

    private void BCTPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCTPCActionPerformed
        String ProductName = "Black Coffee Table with Mirror";
        int price = 1200;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(BCTQ.getText());
        double TotalPrice = Quantity * price;

       int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

   if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
       
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
       JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}


    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    BCTQ.setText("");
    BCTS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_BCTPCActionPerformed

    private void BCTACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCTACActionPerformed
        String ProductName = "Black Coffee Table with Mirror";
        int price = 1200;
        int Quantity;
        
        try {
        Quantity = Integer.parseInt(BCTQ.getText());
        
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

       
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

        
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

      
        BCTS.setText(String.valueOf(newStock));
        BCTQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_BCTACActionPerformed

    private void RWDSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RWDSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RWDSActionPerformed

    private void RMCTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RMCTSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RMCTSActionPerformed

    private void SWBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SWBSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SWBSActionPerformed

    private void BCTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCTSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BCTSActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        TablesChairs obj = new TablesChairs();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void RMCTQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RMCTQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RMCTQActionPerformed

    private void SWBQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SWBQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SWBQActionPerformed

    private void BCTQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCTQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BCTQActionPerformed

    private void RWDQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RWDQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RWDQActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CoffeeTables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CoffeeTables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CoffeeTables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CoffeeTables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CoffeeTables().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BCTAC;
    private javax.swing.JButton BCTPC;
    private javax.swing.JTextField BCTQ;
    private javax.swing.JTextField BCTS;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton RMCTAC;
    private javax.swing.JButton RMCTPC;
    private javax.swing.JTextField RMCTQ;
    private javax.swing.JTextField RMCTS;
    private javax.swing.JButton RWDAC;
    private javax.swing.JButton RWDPC;
    private javax.swing.JTextField RWDQ;
    private javax.swing.JTextField RWDS;
    private javax.swing.JButton SWBAC;
    private javax.swing.JButton SWBPC;
    private javax.swing.JTextField SWBQ;
    private javax.swing.JTextField SWBS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea jTextArea11;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextArea jTextArea9;
    // End of variables declaration//GEN-END:variables
}
