/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;
import DB.DBConnector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import UI.AdminDashboard;
import java.awt.BorderLayout;
import java.sql.Statement;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;


/**
 *
 * @author Jessa Mae Codizal
 */
public class InventoryManagement extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;
private boolean dataLoaded = false; // Flag to track if data is loaded

    /**
     * Creates new form InventoryManagement
     */
    public InventoryManagement() {
        initComponents();
         DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
    }
   



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        HomeButton1 = new javax.swing.JButton();
        btnviewproducts = new javax.swing.JButton();
        updatestockbutton = new javax.swing.JButton();
        ViewDetailsbtn = new javax.swing.JButton();
        StockAnalytics = new javax.swing.JButton();
        LowStockPanel = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(140, 122, 107));
        jTable1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Price", "Material", "Color", "Stocks"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 1050, 280));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DYEY EN DI'S FURNITURE HAVEN");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("INVENTORY MANAGEMENT");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 60, -1, -1));

        jPanel4.setBackground(new java.awt.Color(140, 122, 107));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel15.setText("    HAVEN");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 110, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel16.setText("DYEY");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 60, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel17.setText("EN");
        jPanel4.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 60, -1));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel18.setText("DI'S");
        jPanel4.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 60, -1));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel19.setText("FURNITURE");
        jPanel4.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 110, -1));

        HomeButton1.setBackground(new java.awt.Color(180, 100, 100));
        HomeButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        HomeButton1.setForeground(new java.awt.Color(255, 255, 255));
        HomeButton1.setText("EXIT");
        HomeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(HomeButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 180, 50));

        btnviewproducts.setBackground(new java.awt.Color(101, 101, 101));
        btnviewproducts.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnviewproducts.setForeground(new java.awt.Color(255, 255, 255));
        btnviewproducts.setText("View Products");
        btnviewproducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewproductsActionPerformed(evt);
            }
        });
        jPanel4.add(btnviewproducts, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 180, 50));

        updatestockbutton.setBackground(new java.awt.Color(101, 101, 101));
        updatestockbutton.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        updatestockbutton.setForeground(new java.awt.Color(255, 255, 255));
        updatestockbutton.setText("Update Stock");
        updatestockbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatestockbuttonActionPerformed(evt);
            }
        });
        jPanel4.add(updatestockbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 180, 50));

        ViewDetailsbtn.setBackground(new java.awt.Color(101, 101, 101));
        ViewDetailsbtn.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        ViewDetailsbtn.setForeground(new java.awt.Color(255, 255, 255));
        ViewDetailsbtn.setText("View Details");
        ViewDetailsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewDetailsbtnActionPerformed(evt);
            }
        });
        jPanel4.add(ViewDetailsbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 180, 50));

        StockAnalytics.setBackground(new java.awt.Color(101, 101, 101));
        StockAnalytics.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        StockAnalytics.setForeground(new java.awt.Color(255, 255, 255));
        StockAnalytics.setText("Stock Analytics");
        StockAnalytics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockAnalyticsActionPerformed(evt);
            }
        });
        jPanel4.add(StockAnalytics, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 180, 50));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 700));
        getContentPane().add(LowStockPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 380, 1030, 290));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 1180, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnviewproductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewproductsActionPerformed

        String sql = "SELECT * FROM ProductListView";


        try {
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rst = pst.executeQuery();

          
            DefaultTableModel model = new DefaultTableModel(
                new String[]{"Product ID", "Product Name", "Price"}, 0
            );

            while (rst.next()) {
                model.addRow(new Object[]{
                    rst.getInt("ProductID"),
                    rst.getString("ProductName"),
                    rst.getDouble("Price"),
                   
                });
            }

            jTable1.setModel(model); 

            rst.close();
            pst.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_btnviewproductsActionPerformed

    private void updatestockbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatestockbuttonActionPerformed

   if (!dataLoaded) {
       
        String query = "SELECT ProductID, ProductName, Price, Stock FROM products";
        
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

           
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ProductID");
            model.addColumn("ProductName");
            model.addColumn("Price");
            model.addColumn("Stocks");

        
            while (rs.next()) {
                int productID = rs.getInt("ProductID");
                String productName = rs.getString("productName");
                double price = rs.getDouble("Price");
                int stock = rs.getInt("stock");

                model.addRow(new Object[]{productID, productName, price, stock});
            }

            
            jTable1.setModel(model);

          
            dataLoaded = true;

            JOptionPane.showMessageDialog(this, "Product data loaded. Click again to update stock.");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching product data.");
        }
    } else {
       
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product row to update stock.");
            return;
        }

        int ProductID = (int) jTable1.getValueAt(selectedRow, 0);
        String productName = (String) jTable1.getValueAt(selectedRow, 1);

     
        String input = JOptionPane.showInputDialog(this, "Enter new stock for product \"" + productName + "\":");
        if (input == null || input.trim().isEmpty()) {
            return;
        }

        try {
            int newStock = Integer.parseInt(input.trim());

            
            String updateSql = "UPDATE products SET stock = ? WHERE ProductID = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(updateSql)) {
                pstmt.setInt(1, newStock);
                pstmt.setInt(2, ProductID);
                int rowsUpdated = pstmt.executeUpdate();

                if (rowsUpdated > 0) {
                   
                    jTable1.setValueAt(newStock, selectedRow, 3); // Assuming stock is at column index 3
                    JOptionPane.showMessageDialog(this, "Stock updated successfully!");
                } else {
                    JOptionPane.showMessageDialog(this, "Stock update failed.");
                }
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid stock number entered.");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating stock in database.");
        }

        
        dataLoaded = false;
    }

    }//GEN-LAST:event_updatestockbuttonActionPerformed

    private void ViewDetailsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewDetailsbtnActionPerformed
       int selectedRow = jTable1.getSelectedRow(); 
    if (selectedRow != -1) { 
       
        int productID = (int) jTable1.getValueAt(selectedRow, 0);

       
        String query = "SELECT ProductID, productName, Price, Material, Color, Stock FROM products WHERE ProductID = ?";

        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, productID); 
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
               
                StringBuilder details = new StringBuilder();
                details.append("Product ID: ").append(rs.getInt("ProductID")).append("\n");
                details.append("Product Name: ").append(rs.getString("productName")).append("\n");
                details.append("Price: ").append(rs.getDouble("Price")).append("\n");
                details.append("Materials: ").append(rs.getString("Material")).append("\n");
                details.append("Color: ").append(rs.getString("Color")).append("\n");
                details.append("Stock: ").append(rs.getInt("Stock")).append("\n");

               
                JOptionPane.showMessageDialog(this, details.toString(), "Product Details", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No product found with ID: " + productID);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving product details.");
        }
    }
    }//GEN-LAST:event_ViewDetailsbtnActionPerformed

    private void HomeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButton1ActionPerformed
         AdminDashboard obj = new AdminDashboard();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeButton1ActionPerformed

    private void StockAnalyticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockAnalyticsActionPerformed
        try {
        String query = "SELECT ProductID, Stock FROM products WHERE Stock <= 100 ORDER BY Stock ASC LIMIT 10";
        pst = conn.prepareStatement(query);
        rst = pst.executeQuery();

        DefaultCategoryDataset lowStockDataset = new DefaultCategoryDataset();
        while (rst.next()) {
            String productID = rst.getString("ProductID");
            int stock = rst.getInt("Stock");
            lowStockDataset.addValue(stock, "Stock Quantity", productID);
        }

        JFreeChart lowStockChart = ChartFactory.createBarChart(
                "Low Stock Products",       // Chart title
                "Product ID",             // X-axis label
                "Stock (0-100)",         // Y-axis label
                lowStockDataset,           // Dataset
                PlotOrientation.VERTICAL,   // Orientation
                false,                      // Include legend
                true,                       // Tooltips
                false                       // URLs
        );

        // Display in a panel named LowStockPanel (create it in your GUI)
        ChartPanel stockPanel = new ChartPanel(lowStockChart);
        LowStockPanel.removeAll();
        LowStockPanel.setLayout(new BorderLayout());
        LowStockPanel.add(stockPanel, BorderLayout.CENTER);
        LowStockPanel.validate();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error generating chart: " + e.getMessage());
    }
    }//GEN-LAST:event_StockAnalyticsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventoryManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HomeButton1;
    private javax.swing.JPanel LowStockPanel;
    private javax.swing.JButton StockAnalytics;
    private javax.swing.JButton ViewDetailsbtn;
    private javax.swing.JButton btnviewproducts;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton updatestockbutton;
    // End of variables declaration//GEN-END:variables
}
