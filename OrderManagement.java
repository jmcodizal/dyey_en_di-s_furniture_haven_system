
package UI;

import DB.DBConnector;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jessa Mae Codizal
 */
public class OrderManagement extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;
private boolean isVerificationActive = false;
private boolean isDeleteOrders = false;
private boolean isFirstClick = true;
private boolean dataLoaded = false;
    /**
     * Creates new form OrderManagement
     */
    public OrderManagement() {
        initComponents();
         DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        HomeButton1 = new javax.swing.JButton();
        CustomerDetails = new javax.swing.JButton();
        ViewDetailsbtn = new javax.swing.JButton();
        Orders = new javax.swing.JButton();
        GCashVerification = new javax.swing.JButton();
        CODVerification = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(140, 122, 107));
        jTable1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Customer ID", "Product Name", "Quantity", "Total Price", "Status"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 240, 1070, 300));

        jLabel2.setFont(new java.awt.Font("SansSerif", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DYEY EN DI'S FURNITURE HAVEN");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, -1, -1));

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("ORDER MANAGEMENT");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 80, -1, -1));

        jPanel4.setBackground(new java.awt.Color(140, 122, 107));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel15.setText("    HAVEN");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 110, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel16.setText("DYEY");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 60, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel17.setText("EN");
        jPanel4.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 40, 30, -1));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel18.setText("DI'S");
        jPanel4.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 60, -1));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel19.setText("FURNITURE");
        jPanel4.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 110, -1));

        HomeButton1.setBackground(new java.awt.Color(180, 100, 100));
        HomeButton1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        HomeButton1.setForeground(new java.awt.Color(255, 255, 255));
        HomeButton1.setText("EXIT");
        HomeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(HomeButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 630, 180, 50));

        CustomerDetails.setBackground(new java.awt.Color(101, 101, 101));
        CustomerDetails.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        CustomerDetails.setForeground(new java.awt.Color(255, 255, 255));
        CustomerDetails.setText("Customer Details");
        CustomerDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerDetailsActionPerformed(evt);
            }
        });
        jPanel4.add(CustomerDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 180, 50));

        ViewDetailsbtn.setBackground(new java.awt.Color(101, 101, 101));
        ViewDetailsbtn.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        ViewDetailsbtn.setForeground(new java.awt.Color(255, 255, 255));
        ViewDetailsbtn.setText("Order Details");
        ViewDetailsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewDetailsbtnActionPerformed(evt);
            }
        });
        jPanel4.add(ViewDetailsbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 180, 50));

        Orders.setBackground(new java.awt.Color(101, 101, 101));
        Orders.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        Orders.setForeground(new java.awt.Color(255, 255, 255));
        Orders.setText("Orders");
        Orders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdersActionPerformed(evt);
            }
        });
        jPanel4.add(Orders, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 180, 50));

        GCashVerification.setBackground(new java.awt.Color(101, 101, 101));
        GCashVerification.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        GCashVerification.setForeground(new java.awt.Color(255, 255, 255));
        GCashVerification.setText("GCash Verification");
        GCashVerification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GCashVerificationActionPerformed(evt);
            }
        });
        jPanel4.add(GCashVerification, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 180, 50));

        CODVerification.setBackground(new java.awt.Color(101, 101, 101));
        CODVerification.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        CODVerification.setForeground(new java.awt.Color(255, 255, 255));
        CODVerification.setText("COD Verification");
        CODVerification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CODVerificationActionPerformed(evt);
            }
        });
        jPanel4.add(CODVerification, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 550, 180, 50));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 700));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 1180, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CustomerDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerDetailsActionPerformed
        int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an order from the table.");
        return;
    }

    int customerId = (int) jTable1.getValueAt(selectedRow, 1);

    try {
        
        if (conn == null || conn.isClosed()) {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/furnitureordering", "root", "");
        }

        String query = "SELECT * FROM customer WHERE CustomerID = ?";
        PreparedStatement pst = conn.prepareStatement(query);
        pst.setInt(1, customerId);

        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            String customerInfo = "Customer ID: " + rs.getInt("CustomerID") +
                                  "\nName: " + rs.getString("Name") +
                                  "\nUsername: " + rs.getString("Username") +
                                  "\nEmail: " + rs.getString("Email") +
                                  "\nMobile Number: " + rs.getString("MobileNumber"); 

            JOptionPane.showMessageDialog(this, customerInfo, "Customer Details", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Customer not found.");
        }

        rs.close();
        pst.close();
       

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_CustomerDetailsActionPerformed

    private void ViewDetailsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewDetailsbtnActionPerformed
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to view details.");
        return;
    }

  
    int orderID = (int) jTable1.getValueAt(selectedRow, 0);

    try {
        String query = "SELECT * FROM orders WHERE OrderID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, orderID);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                StringBuilder details = new StringBuilder();
                details.append("Order ID: ").append(rs.getInt("OrderID")).append("\n");
                details.append("Product Name: ").append(rs.getString("ProductName")).append("\n");
                details.append("Quantity: ").append(rs.getInt("Quantity")).append("\n");
                details.append("Total Price: ").append(rs.getDouble("TotalPrice")).append("\n");
                details.append("Payment Method: ").append(rs.getString("PaymentMethod")).append("\n");
                details.append("Delivery Address: ").append(rs.getString("DeliveryAddress")).append("\n");
                details.append("Status: ").append(rs.getString("Status")).append("\n");

                JOptionPane.showMessageDialog(this, details.toString(), "Order Details", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No order found with ID: " + orderID);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving order details.");
    }
    }//GEN-LAST:event_ViewDetailsbtnActionPerformed

    private void HomeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButton1ActionPerformed
        AdminDashboard obj = new AdminDashboard();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeButton1ActionPerformed

    private void OrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdersActionPerformed
                                             
 String[] paymentStatusOptions = {"Paid", "Unpaid"};

String selectedPaymentStatus = (String) JOptionPane.showInputDialog(
    this,
    "Select Payment Status to View:", 
    "Filter Orders", 
    JOptionPane.QUESTION_MESSAGE, 
    null, 
    paymentStatusOptions, 
    paymentStatusOptions[0]
);

if (selectedPaymentStatus != null) {
    
    String[] options;
    
    if (selectedPaymentStatus.equals("Paid")) {
        options = new String[]{"All", "Pending", "Shipped", "On Delivery", "Delivered", "Cancelled", "Refunded"};
    } else {
        options = new String[]{"All", "Pending", "Shipped", "On Delivery", "Delivered", "Cancelled"};
    }

    String selectedStatus = (String) JOptionPane.showInputDialog(
        this, 
        "Select Order Status to View:", 
        "Filter Orders", 
        JOptionPane.QUESTION_MESSAGE, 
        null, 
        options, 
        options[0]
    );

    if (selectedStatus != null) {
        String sql = "";
        PreparedStatement pst = null;

        try {
            
            if (selectedPaymentStatus.equals("Paid")) {
                if (selectedStatus.equals("All")) {
                    sql = "SELECT * FROM PaidOrdersView WHERE PaymentMethod IN ('Cash on Delivery', 'GCash')";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("Pending")) {
                    sql = "SELECT * FROM PaidOrdersView WHERE Status = 'Pending' AND PaymentMethod IN ('Cash on Delivery', 'GCash')";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("Shipped")) {
                    sql = "SELECT * FROM PaidOrdersView WHERE Status = 'Shipped' AND PaymentMethod IN ('Cash on Delivery', 'GCash')";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("On Delivery")) {
                    sql = "SELECT * FROM PaidOrdersView WHERE Status = 'On Delivery' AND PaymentMethod IN ('Cash on Delivery', 'GCash')";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("Delivered")) {
                    sql = "SELECT * FROM PaidOrdersView WHERE Status = 'Delivered' AND PaymentMethod IN ('Cash on Delivery', 'GCash')";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("Cancelled")) {
                    sql = "SELECT * FROM PaidOrdersView WHERE Status = 'Cancelled' AND PaymentMethod IN ('Cash on Delivery', 'GCash')";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("Refunded")) {
                    sql = "SELECT * FROM PaidOrdersView WHERE Status = 'Refunded' AND PaymentMethod IN ('Cash on Delivery', 'GCash')";
                    pst = conn.prepareStatement(sql);
                }
            }

            
            else if (selectedPaymentStatus.equals("Unpaid")) {
                if (selectedStatus.equals("All")) {
                    sql = "SELECT * FROM view_unpaid_orders WHERE IsVerified = 'Yes' AND PaymentMethod IN ('Cash on Delivery', 'GCash') AND Status != 'Refunded'";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("Pending")) {
                    sql = "SELECT * FROM view_unpaid_orders WHERE Status = 'Pending' AND IsVerified = 'Yes' AND PaymentMethod IN ('Cash on Delivery', 'GCash') AND Status != 'Refunded'";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("Shipped")) {
                    sql = "SELECT * FROM view_unpaid_orders WHERE Status = 'Shipped' AND IsVerified = 'Yes' AND PaymentMethod IN ('Cash on Delivery', 'GCash') AND Status != 'Refunded'";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("On Delivery")) {
                    sql = "SELECT * FROM view_unpaid_orders WHERE Status = 'On Delivery' AND IsVerified = 'Yes' AND PaymentMethod IN ('Cash on Delivery', 'GCash') AND Status != 'Refunded'";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("Delivered")) {
                    sql = "SELECT * FROM view_unpaid_orders WHERE Status = 'Delivered' AND IsVerified = 'Yes' AND PaymentMethod IN ('Cash on Delivery', 'GCash') AND Status != 'Refunded'";
                    pst = conn.prepareStatement(sql);
                } else if (selectedStatus.equals("Cancelled")) {
                    sql = "SELECT * FROM view_unpaid_orders WHERE Status = 'Cancelled' AND IsVerified = 'Yes' AND PaymentMethod IN ('Cash on Delivery', 'GCash') AND Status != 'Refunded'";
                    pst = conn.prepareStatement(sql);
                }
            }

            ResultSet rst = pst.executeQuery();

            DefaultTableModel model = new DefaultTableModel(
                new String[]{"Order ID", "Customer ID", "Product Name", "Quantity", "Total Price", "PaymentMethod", "Status"}, 0
            );

            while (rst.next()) {
                model.addRow(new Object[]{
                    rst.getInt("OrderID"),
                    rst.getInt("CustomerID"),
                    rst.getString("ProductName"),
                    rst.getInt("Quantity"),
                    rst.getDouble("TotalPrice"),
                    rst.getString("PaymentMethod"),
                    rst.getString("Status")
                });
            }

            jTable1.setModel(model);  

            rst.close();
            pst.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
}



    }//GEN-LAST:event_OrdersActionPerformed

    private void GCashVerificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GCashVerificationActionPerformed
     if (!isVerificationActive) {
    isVerificationActive = true;

    try {
      
        if (conn == null || conn.isClosed()) {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/furnitureordering", "root", "");
        }

        String sql = "SELECT OrderID, CustomerID, ProductName, Quantity, TotalPrice, DeliveryAddress, OrderDate, IsVerified " +
                     "FROM orders WHERE PaymentMethod = 'Gcash' AND IsPaid = 'Unpaid' AND IsVerified = 'No' AND Status = 'Pending'";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            DefaultTableModel model = new DefaultTableModel(
                    new String[]{"OrderID", "CustomerID", "ProductName", "Quantity", "TotalPrice", "DeliveryAddress", "OrderDate", "IsVerified"}, 0
            );

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("OrderID"),
                    rs.getInt("CustomerID"),
                    rs.getString("ProductName"),
                    rs.getInt("Quantity"),
                    rs.getDouble("TotalPrice"),
                    rs.getString("DeliveryAddress"),
                    rs.getDate("OrderDate"),
                    rs.getString("IsVerified")
                });
            }

            jTable1.setModel(model);

            JOptionPane.showMessageDialog(this, "Note: Only UNPAID GCash orders with 'Pending' status and not yet VERIFIED are shown.\nSelect a row to mark payment as verified.");
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading GCash paid orders pending verification: " + ex.getMessage());
    }
} else {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to verify GCash payment.");
        return;
    }

    int orderID = (int) jTable1.getValueAt(selectedRow, 0);

    int confirm = JOptionPane.showConfirmDialog(this,
            "Confirm that GCash payment for Order ID " + orderID + " has been VERIFIED?",
            "Verify GCash Payment", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        try {
            
            if (conn == null || conn.isClosed()) {
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/furnitureordering", "root", "");
            }

            String updateSql = "UPDATE orders SET IsVerified = 'Yes', Status = 'Pending' WHERE OrderID = ? AND PaymentMethod = 'Gcash'";
            try (PreparedStatement pstmt = conn.prepareStatement(updateSql)) {
                pstmt.setInt(1, orderID);
                int rows = pstmt.executeUpdate();

                if (rows > 0) {
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.removeRow(selectedRow);
                    JOptionPane.showMessageDialog(this, "GCash payment marked as VERIFIED. Status remains 'Pending'.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to verify GCash payment.");
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error verifying payment: " + ex.getMessage());
        }
    }
}

    }//GEN-LAST:event_GCashVerificationActionPerformed

    private void CODVerificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CODVerificationActionPerformed
    if (isFirstClick) {
    isVerificationActive = true;

    try {
      
        if (conn == null || conn.isClosed()) {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/furnitureordering", "root", "");
        }

        String sql = "SELECT OrderID, CustomerID, ProductName, Quantity, TotalPrice, DeliveryAddress, OrderDate, IsVerified " +
                     "FROM orders WHERE PaymentMethod = 'Cash on Delivery' AND IsPaid = 'Unpaid' AND IsVerified = 'No' AND Status = 'Pending'";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            DefaultTableModel model = new DefaultTableModel(
                    new String[]{"OrderID", "CustomerID", "ProductName", "Quantity", "TotalPrice", "DeliveryAddress", "OrderDate", "IsVerified"}, 0
            );

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("OrderID"),
                    rs.getInt("CustomerID"),
                    rs.getString("ProductName"),
                    rs.getInt("Quantity"),
                    rs.getDouble("TotalPrice"),
                    rs.getString("DeliveryAddress"),
                    rs.getDate("OrderDate"),
                    rs.getString("IsVerified")
                });
            }

            jTable1.setModel(model);
            JOptionPane.showMessageDialog(this, "Note: Only UNPAID Cash on Delivery orders with 'Pending' status and not yet VERIFIED are shown.\nSelect a row to mark payment as verified.");

            isFirstClick = false;
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading Cash on Delivery orders pending verification: " + ex.getMessage());
    }
} else {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to verify Cash on Delivery payment.");
        return;
    }

    int orderID = (int) jTable1.getValueAt(selectedRow, 0);

    int confirm = JOptionPane.showConfirmDialog(this,
            "Confirm that Cash on Delivery payment for Order ID " + orderID + " has been VERIFIED?",
            "Verify Cash on Delivery Payment", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        try {
          
            if (conn == null || conn.isClosed()) {
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/furnitureordering", "root", "");
            }

            String updateSql = "UPDATE orders SET IsVerified = 'Yes', Status = 'Pending' WHERE OrderID = ? AND PaymentMethod = 'Cash on Delivery'";
            try (PreparedStatement pstmt = conn.prepareStatement(updateSql)) {
                pstmt.setInt(1, orderID);
                int rows = pstmt.executeUpdate();

                if (rows > 0) {
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.removeRow(selectedRow);
                    JOptionPane.showMessageDialog(this, "Cash on Delivery payment marked as VERIFIED. Status remains 'Pending'.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to verify Cash on Delivery payment.");
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error verifying payment: " + ex.getMessage());
        }
    }
}

    }//GEN-LAST:event_CODVerificationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CODVerification;
    private javax.swing.JButton CustomerDetails;
    private javax.swing.JButton GCashVerification;
    private javax.swing.JButton HomeButton1;
    private javax.swing.JButton Orders;
    private javax.swing.JButton ViewDetailsbtn;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
