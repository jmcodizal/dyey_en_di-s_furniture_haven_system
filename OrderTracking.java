
package UI;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import UI.CustomerDashboard;
import java.sql.Statement;
import DB.DBConnector;
import OrderingSystem.SessionManager;
import UI.CustomerDashboard;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Jessa Mae Codizal
 */
public class OrderTracking extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;

private int customerId;
private boolean isPaymentStatusActive = false;
    /**
     * Creates new form OrderTracking
     */
    public OrderTracking() {
        initComponents();
         DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
        this.customerId = SessionManager.getCustomerID();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        HomeButton1 = new javax.swing.JButton();
        btnorders = new javax.swing.JButton();
        ToPayLater = new javax.swing.JButton();
        Completed = new javax.swing.JButton();
        ToShipped = new javax.swing.JButton();
        ToReceived = new javax.swing.JButton();
        Refunded = new javax.swing.JButton();
        Cancelled = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(140, 122, 107));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel15.setText("    HAVEN");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 110, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel16.setText("DYEY");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 60, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel17.setText("EN");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 40, 30, -1));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel18.setText("DI'S");
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 60, -1));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel19.setText("FURNITURE");
        jPanel3.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 110, -1));

        HomeButton1.setBackground(new java.awt.Color(180, 100, 100));
        HomeButton1.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        HomeButton1.setForeground(new java.awt.Color(255, 255, 255));
        HomeButton1.setText("EXIT");
        HomeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(HomeButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 630, 180, 50));

        btnorders.setBackground(new java.awt.Color(101, 101, 101));
        btnorders.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnorders.setForeground(new java.awt.Color(255, 255, 255));
        btnorders.setText("My Orders");
        btnorders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnordersActionPerformed(evt);
            }
        });
        jPanel3.add(btnorders, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 180, 50));

        ToPayLater.setBackground(new java.awt.Color(101, 101, 101));
        ToPayLater.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        ToPayLater.setForeground(new java.awt.Color(255, 255, 255));
        ToPayLater.setText("To Pay Later");
        ToPayLater.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToPayLaterActionPerformed(evt);
            }
        });
        jPanel3.add(ToPayLater, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 180, 50));

        Completed.setBackground(new java.awt.Color(101, 101, 101));
        Completed.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        Completed.setForeground(new java.awt.Color(255, 255, 255));
        Completed.setText("Completed");
        Completed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompletedActionPerformed(evt);
            }
        });
        jPanel3.add(Completed, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 180, 50));

        ToShipped.setBackground(new java.awt.Color(101, 101, 101));
        ToShipped.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        ToShipped.setForeground(new java.awt.Color(255, 255, 255));
        ToShipped.setText("To Shipped");
        ToShipped.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToShippedActionPerformed(evt);
            }
        });
        jPanel3.add(ToShipped, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 180, 50));

        ToReceived.setBackground(new java.awt.Color(101, 101, 101));
        ToReceived.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        ToReceived.setForeground(new java.awt.Color(255, 255, 255));
        ToReceived.setText("To Received");
        ToReceived.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToReceivedActionPerformed(evt);
            }
        });
        jPanel3.add(ToReceived, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 180, 50));

        Refunded.setBackground(new java.awt.Color(101, 101, 101));
        Refunded.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        Refunded.setForeground(new java.awt.Color(255, 255, 255));
        Refunded.setText("Refunded");
        Refunded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefundedActionPerformed(evt);
            }
        });
        jPanel3.add(Refunded, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 180, 50));

        Cancelled.setBackground(new java.awt.Color(101, 101, 101));
        Cancelled.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        Cancelled.setForeground(new java.awt.Color(255, 255, 255));
        Cancelled.setText("Cancelled");
        Cancelled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelledActionPerformed(evt);
            }
        });
        jPanel3.add(Cancelled, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 180, 50));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 700));

        jTable1.setBackground(new java.awt.Color(140, 122, 107));
        jTable1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Product Name", "Quantity", "Total Price", "Delivery Address", "Status", "Order Date", "IsPaid"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, 1050, 540));

        jLabel2.setFont(new java.awt.Font("SansSerif", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DYEY EN DI'S FURNITURE HAVEN");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 30, -1, -1));

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Order Tracking");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 80, -1, -1));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 1180, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButton1ActionPerformed
        isPaymentStatusActive = false;
        CustomerDashboard obj = new CustomerDashboard();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeButton1ActionPerformed

    private void btnordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnordersActionPerformed
        isPaymentStatusActive = false;
        String sql = "SELECT * FROM AllCustomerOrdersView WHERE CustomerID = ?";


        try {
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, customerId);
            ResultSet rst = pst.executeQuery();

            DefaultTableModel model = new DefaultTableModel(
                new String[]{"Order ID" ,"Product Name", "Quantity",  "Total Price", "Delivery Address", "Status", "OrderDate", "IsPaid"}, 0
            );

            while (rst.next()) {
                model.addRow(new Object[]{
                    rst.getInt("OrderID"),
                    rst.getString("ProductName"),
                    rst.getInt("Quantity"),
                    rst.getDouble("TotalPrice"),
                    rst.getString("DeliveryAddress"),
                    rst.getString("Status"),
                    rst.getDate("OrderDate"),
                    rst.getString("IsPaid")

                });
            }

            jTable1.setModel(model);

            rst.close();
            pst.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnordersActionPerformed

    private void ToPayLaterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToPayLaterActionPerformed
      isPaymentStatusActive = false;

try {
    String sql = "SELECT * FROM view_unpaid_orders WHERE CustomerID = ?";
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setInt(1, customerId); 

        try (ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 

            while (rs.next()) {
                Object[] row = new Object[model.getColumnCount()];
                for (int i = 0; i < model.getColumnCount(); i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model.addRow(row);
            }
        }
    }
} catch (SQLException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error loading unpaid orders.");
}

    }//GEN-LAST:event_ToPayLaterActionPerformed

    private void CompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompletedActionPerformed
       isPaymentStatusActive = false;

try {
    String sql = "SELECT * FROM view_delivered_orders WHERE CustomerID = ?";
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setInt(1, customerId); 

        try (ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 

            while (rs.next()) {
                Object[] row = new Object[model.getColumnCount()];
                for (int i = 0; i < model.getColumnCount(); i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model.addRow(row);
            }
        }
    }
} catch (SQLException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error loading delivered orders.");
}
    }//GEN-LAST:event_CompletedActionPerformed

    private void ToShippedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToShippedActionPerformed
        isPaymentStatusActive = false;

try {
    String sql = "SELECT * FROM view_shipped_orders WHERE CustomerID = ?";
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setInt(1, customerId);

        try (ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 

            while (rs.next()) {
                Object[] row = new Object[model.getColumnCount()];
                for (int i = 0; i < model.getColumnCount(); i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model.addRow(row);
            }
        }
    }
} catch (SQLException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error loading shipped orders.");
}
    }//GEN-LAST:event_ToShippedActionPerformed

    private void ToReceivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToReceivedActionPerformed
        isPaymentStatusActive = false;

try {
    String sql = "SELECT * FROM view_on_delivery_orders WHERE CustomerID = ?";
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setInt(1, customerId); 

        try (ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 

            while (rs.next()) {
                Object[] row = new Object[model.getColumnCount()];
                for (int i = 0; i < model.getColumnCount(); i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model.addRow(row);
            }
        }
    }
} catch (SQLException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error loading 'On Delivery' orders.");
}


    }//GEN-LAST:event_ToReceivedActionPerformed

    private void RefundedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefundedActionPerformed
       isPaymentStatusActive = false;

try {
    String sql = "SELECT * FROM view_refunded_orders WHERE CustomerID = ?";
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setInt(1, customerId); 

        try (ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            while (rs.next()) {
                Object[] row = new Object[model.getColumnCount()];
                for (int i = 0; i < model.getColumnCount(); i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model.addRow(row);
            }
        }
    }
} catch (SQLException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error loading 'Refunded' orders.");
}

    }//GEN-LAST:event_RefundedActionPerformed

    private void CancelledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelledActionPerformed
        isPaymentStatusActive = false;

try {
    String sql = "SELECT * FROM view_cancelled_orders WHERE CustomerID = ?";
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setInt(1, customerId); 

        try (ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 

            while (rs.next()) {
                Object[] row = new Object[model.getColumnCount()];
                for (int i = 0; i < model.getColumnCount(); i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model.addRow(row);
            }
        }
    }
} catch (SQLException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error loading 'Cancelled' orders.");
}

    }//GEN-LAST:event_CancelledActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderTracking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderTracking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderTracking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderTracking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderTracking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancelled;
    private javax.swing.JButton Completed;
    private javax.swing.JButton HomeButton1;
    private javax.swing.JButton Refunded;
    private javax.swing.JButton ToPayLater;
    private javax.swing.JButton ToReceived;
    private javax.swing.JButton ToShipped;
    private javax.swing.JButton btnorders;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
