
package UI;
import DB.DBConnector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import OrderingSystem.SessionManager;
import UI.CustomerDashboard;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Statement;

/**
 *
 * @author jessa
 */
public class Orders extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;

private int customerId;
private boolean isPaymentStatusActive = false;
private boolean isFirstClick = true;



    /**
     * Creates new form Orders
     */
    public Orders() {
        initComponents();
         DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
        this.customerId = SessionManager.getCustomerID();
       
    }
  


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        HomeButton1 = new javax.swing.JButton();
        btnorders = new javax.swing.JButton();
        UpdateQuantity = new javax.swing.JButton();
        UpdateStatus = new javax.swing.JButton();
        updateAddressbtn = new javax.swing.JButton();
        ViewDetailsbtn = new javax.swing.JButton();
        GcashRefund = new javax.swing.JButton();
        PaymentStatus = new javax.swing.JButton();
        CODRefund = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(140, 122, 107));
        jTable1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Product Name", "Quantity", "Total Price", "Delivery Address", "Status", "Order Date", "IsPaid"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, 1020, 550));

        jLabel2.setFont(new java.awt.Font("SansSerif", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DYEY EN DI'S FURNITURE HAVEN");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, -1, -1));

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("YOUR ORDERS!");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 80, -1, -1));

        jPanel3.setBackground(new java.awt.Color(140, 122, 107));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel15.setText("    HAVEN");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 110, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel16.setText("DYEY");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 60, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel17.setText("EN");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 40, 30, -1));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel18.setText("DI'S");
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 60, -1));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel19.setText("FURNITURE");
        jPanel3.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 110, -1));

        HomeButton1.setBackground(new java.awt.Color(180, 100, 100));
        HomeButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        HomeButton1.setForeground(new java.awt.Color(255, 255, 255));
        HomeButton1.setText("EXIT");
        HomeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(HomeButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 620, 180, 50));

        btnorders.setBackground(new java.awt.Color(101, 101, 101));
        btnorders.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnorders.setForeground(new java.awt.Color(255, 255, 255));
        btnorders.setText("My Orders");
        btnorders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnordersActionPerformed(evt);
            }
        });
        jPanel3.add(btnorders, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 180, 50));

        UpdateQuantity.setBackground(new java.awt.Color(101, 101, 101));
        UpdateQuantity.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        UpdateQuantity.setForeground(new java.awt.Color(255, 255, 255));
        UpdateQuantity.setText("Update Quantity");
        UpdateQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateQuantityActionPerformed(evt);
            }
        });
        jPanel3.add(UpdateQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 180, 50));

        UpdateStatus.setBackground(new java.awt.Color(101, 101, 101));
        UpdateStatus.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        UpdateStatus.setForeground(new java.awt.Color(255, 255, 255));
        UpdateStatus.setText("Update Status");
        UpdateStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateStatusActionPerformed(evt);
            }
        });
        jPanel3.add(UpdateStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 180, 50));

        updateAddressbtn.setBackground(new java.awt.Color(101, 101, 101));
        updateAddressbtn.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        updateAddressbtn.setForeground(new java.awt.Color(255, 255, 255));
        updateAddressbtn.setText("Update Address");
        updateAddressbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAddressbtnActionPerformed(evt);
            }
        });
        jPanel3.add(updateAddressbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 180, 50));

        ViewDetailsbtn.setBackground(new java.awt.Color(101, 101, 101));
        ViewDetailsbtn.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        ViewDetailsbtn.setForeground(new java.awt.Color(255, 255, 255));
        ViewDetailsbtn.setText("View Details");
        ViewDetailsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewDetailsbtnActionPerformed(evt);
            }
        });
        jPanel3.add(ViewDetailsbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 180, 50));

        GcashRefund.setBackground(new java.awt.Color(101, 101, 101));
        GcashRefund.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        GcashRefund.setForeground(new java.awt.Color(255, 255, 255));
        GcashRefund.setText("GCash Refund");
        GcashRefund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GcashRefundActionPerformed(evt);
            }
        });
        jPanel3.add(GcashRefund, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 180, 50));

        PaymentStatus.setBackground(new java.awt.Color(101, 101, 101));
        PaymentStatus.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        PaymentStatus.setForeground(new java.awt.Color(255, 255, 255));
        PaymentStatus.setText("Payment Status");
        PaymentStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentStatusActionPerformed(evt);
            }
        });
        jPanel3.add(PaymentStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 180, 50));

        CODRefund.setBackground(new java.awt.Color(101, 101, 101));
        CODRefund.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        CODRefund.setForeground(new java.awt.Color(255, 255, 255));
        CODRefund.setText("COD Refund");
        CODRefund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CODRefundActionPerformed(evt);
            }
        });
        jPanel3.add(CODRefund, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 180, 50));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 700));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 1180, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnordersActionPerformed
        isPaymentStatusActive = false;
       String sql = "SELECT * FROM orders WHERE CustomerID = ? AND Status = 'Pending'";

        try {
            PreparedStatement pst = conn.prepareStatement(sql);
             pst.setInt(1, customerId); 
            ResultSet rst = pst.executeQuery();

            DefaultTableModel model = new DefaultTableModel(
                new String[]{"Order ID" ,"Product Name", "Quantity",  "Total Price", "Delivery Address", "Status", "OrderDate", "IsPaid"}, 0
            );

            while (rst.next()) {
                model.addRow(new Object[]{
                    rst.getInt("OrderID"),
                    rst.getString("ProductName"),
                    rst.getInt("Quantity"),
                    rst.getDouble("TotalPrice"),
                    rst.getString("DeliveryAddress"),
                    rst.getString("Status"),
                    rst.getDate("OrderDate"),
                    rst.getString("IsPaid")

                });
            }

            jTable1.setModel(model); 

            rst.close();
            pst.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnordersActionPerformed

    private void UpdateQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateQuantityActionPerformed
      isPaymentStatusActive = false;
    int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to update quantity.");
        return;
    }

    int orderID = (int) jTable1.getValueAt(selectedRow, 0); 

    int newQuantity;
    try {
        newQuantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter new quantity:"));
        if (newQuantity <= 0) {
            JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.");
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity.");
        return;
    }

    try {
        String getProductSql = "SELECT o.Quantity, o.ProductName, p.Price, p.Stock FROM orders o INNER JOIN products p ON o.ProductName = p.ProductName WHERE o.OrderID = ?";
        int oldQuantity = 0;
        String productName = "";
        double price = 0;
        int stock = 0;

        try (PreparedStatement productStmt = conn.prepareStatement(getProductSql)) {
            productStmt.setInt(1, orderID);
            try (ResultSet rs = productStmt.executeQuery()) {
                if (rs.next()) {
                    oldQuantity = rs.getInt("Quantity");
                    productName = rs.getString("ProductName");
                    price = rs.getDouble("Price");
                    stock = rs.getInt("Stock");
                } else {
                    JOptionPane.showMessageDialog(this, "Product info not found.");
                    return;
                }
            }
        }

        int quantityDifference = newQuantity - oldQuantity;
        int newStock = stock - quantityDifference;

        if (newStock < 0) {
            JOptionPane.showMessageDialog(this, "Not enough stock available.");
            return;
        }

        double newTotal = price * newQuantity;

        
        conn.setAutoCommit(false);

       
        String updateOrderSql = "UPDATE orders SET Quantity = ?, TotalPrice = ? WHERE OrderID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateOrderSql)) {
            pstmt.setInt(1, newQuantity);
            pstmt.setDouble(2, newTotal);
            pstmt.setInt(3, orderID);
            pstmt.executeUpdate();
        }

        
        String updateStockSql = "UPDATE products SET Stock = ? WHERE ProductName = ?";
        try (PreparedStatement stockStmt = conn.prepareStatement(updateStockSql)) {
            stockStmt.setInt(1, newStock);
            stockStmt.setString(2, productName);
            stockStmt.executeUpdate();
        }

      
        conn.commit();
        conn.setAutoCommit(true);

        jTable1.setValueAt(newQuantity, selectedRow, 2); 
        jTable1.setValueAt(newTotal, selectedRow, 3);    

        JOptionPane.showMessageDialog(this, "Quantity, total price, and stock updated successfully!");

    } catch (SQLException e) {
        try {
            conn.rollback();
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating quantity and stock.");
    }
    }//GEN-LAST:event_UpdateQuantityActionPerformed

    private void updateAddressbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAddressbtnActionPerformed
        isPaymentStatusActive = false;
            JOptionPane.showMessageDialog(this, "Note: Make sure to put your complete address.");
               int selectedRow = jTable1.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a row to update the address.");
                return;
            }

            int orderID = (int) jTable1.getValueAt(selectedRow, 0);

             JOptionPane.showMessageDialog(this, "Note: You can only edit order information if the status is 'Pending'.");
            String newAddress = JOptionPane.showInputDialog(this, "Enter new delivery address:");

            if (newAddress == null || newAddress.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "No address entered. Update cancelled.");
                return;
            }

            try {
                String updateSql = "UPDATE orders SET DeliveryAddress = ? WHERE OrderID = ?";
                PreparedStatement pstmt = conn.prepareStatement(updateSql);
                pstmt.setString(1, newAddress);
                pstmt.setInt(2, orderID);
                int rowsUpdated = pstmt.executeUpdate();

                if (rowsUpdated > 0) {

                    jTable1.setValueAt(newAddress, selectedRow, 4); // Column 4 = Delivery Address
                    JOptionPane.showMessageDialog(this, "Address updated successfully!");
                } else {
                    JOptionPane.showMessageDialog(this, "Update failed.");
                }

                pstmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error updating address: " + e.getMessage());
            }

    }//GEN-LAST:event_updateAddressbtnActionPerformed

    private void ViewDetailsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewDetailsbtnActionPerformed
       isPaymentStatusActive = false;
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to view details.");
        return;
    }

   
    int orderID = (int) jTable1.getValueAt(selectedRow, 0);

    try {
        String query = "SELECT * FROM orders WHERE OrderID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, orderID);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                StringBuilder details = new StringBuilder();
                details.append("Order ID: ").append(rs.getInt("OrderID")).append("\n");
                details.append("Product Name: ").append(rs.getString("ProductName")).append("\n");
                details.append("Quantity: ").append(rs.getInt("Quantity")).append("\n");
                details.append("Total Price: ").append(rs.getDouble("TotalPrice")).append("\n");
                details.append("Payment Method: ").append(rs.getString("PaymentMethod")).append("\n");
                details.append("Delivery Address: ").append(rs.getString("DeliveryAddress")).append("\n");
                details.append("Status: ").append(rs.getString("Status")).append("\n");

                JOptionPane.showMessageDialog(this, details.toString(), "Order Details", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No order found with ID: " + orderID);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving order details.");
    }
    }//GEN-LAST:event_ViewDetailsbtnActionPerformed

    private void GcashRefundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GcashRefundActionPerformed
   isPaymentStatusActive = false;

    if (isFirstClick) {
       
        try {
            String sql = "SELECT OrderID, ProductName, Quantity, TotalPrice, IsPaid FROM orders WHERE PaymentMethod = 'GCash' AND IsPaid = 'Paid'";
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {

                
                DefaultTableModel model = new DefaultTableModel(
                    new Object[]{"Order ID", "Product Name", "Quantity", "Total Price", "Payment Status"}, 0
                );

                while (rs.next()) {
                    int orderId = rs.getInt("OrderID");
                    String productName = rs.getString("ProductName");
                    int quantity = rs.getInt("Quantity");
                    double totalPrice = rs.getDouble("TotalPrice");
                    String isPaid = rs.getString("IsPaid");

                    model.addRow(new Object[]{orderId, productName, quantity, totalPrice, isPaid});
                }

                jTable1.setModel(model); 
            }
            JOptionPane.showMessageDialog(this, "Paid GCash orders loaded. Now select an order to refund.");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading paid orders: " + e.getMessage());
        }

        isFirstClick = false;
    } else {
        
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to refund.");
            return;
        }

        int OrderID = (int) jTable1.getValueAt(selectedRow, 0);  

        String paymentMethod = "";
        double totalAmount = 0.0;
        String gcashName = "";
        String gcashNumber = "";
        String orderStatus = "";

        try {
           
            String orderSQL = "SELECT PaymentMethod, TotalPrice, IsPaid FROM orders WHERE OrderID = ?";
            try (PreparedStatement stmt = conn.prepareStatement(orderSQL)) {
                stmt.setInt(1, OrderID);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        paymentMethod = rs.getString("PaymentMethod");
                        totalAmount = rs.getDouble("TotalPrice");
                        orderStatus = rs.getString("IsPaid");
                    } else {
                        JOptionPane.showMessageDialog(this, "Order not found.");
                        return;
                    }
                }
            }

            if (!"Paid".equalsIgnoreCase(orderStatus)) {
                JOptionPane.showMessageDialog(this, "Only PAID orders can be refunded.");
                return;
            }

            if (!"GCash".equalsIgnoreCase(paymentMethod)) {
                JOptionPane.showMessageDialog(this, "Refund is only supported for GCash payments.");
                return;
            }

            
            String gcashSQL = "SELECT GCashName, GCashNumber FROM gcash WHERE OrderID = ?";
            try (PreparedStatement stmt = conn.prepareStatement(gcashSQL)) {
                stmt.setInt(1, OrderID);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        gcashName = rs.getString("GCashName");
                        gcashNumber = rs.getString("GCashNumber");
                    } else {
                        JOptionPane.showMessageDialog(this, "GCash details not found.");
                        return;
                    }
                }
            }

          
            JOptionPane.showMessageDialog(this,
                    "Refund of ₱" + totalAmount +
                            " has been returned to GCash number: " + gcashNumber +
                            "\nGcash Account Name: " + gcashName,
                    "GCash Refund", JOptionPane.INFORMATION_MESSAGE);

            
            String insertRefundSQL = "INSERT INTO refundorders_gcash (OrderID, PaymentMethod, TotalAmount, GCashName, GCashNumber) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement refundStmt = conn.prepareStatement(insertRefundSQL)) {
                refundStmt.setInt(1, OrderID);
                refundStmt.setString(2, paymentMethod);
                refundStmt.setDouble(3, totalAmount);
                refundStmt.setString(4, gcashName);
                refundStmt.setString(5, gcashNumber);
                refundStmt.executeUpdate();
            }

           
            String updateOrderSQL = "UPDATE orders SET Status = 'Refunded', IsPaid = 'Refunded' WHERE OrderID = ?";
            try (PreparedStatement updateStmt = conn.prepareStatement(updateOrderSQL)) {
                updateStmt.setInt(1, OrderID);
                updateStmt.executeUpdate();
            }

           
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.removeRow(selectedRow);

            JOptionPane.showMessageDialog(this, "Order refunded and status updated successfully.");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error during refund: " + e.getMessage());
        }

        isFirstClick = true;
    }
    }//GEN-LAST:event_GcashRefundActionPerformed

    private void UpdateStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateStatusActionPerformed
     isPaymentStatusActive = false;
    int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to cancel.");
        return;
    }

    int OrderID = (int) jTable1.getValueAt(selectedRow, 0);

    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel this order?", 
            "Confirm Cancel", JOptionPane.YES_NO_OPTION);

    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    String newStatus = "Cancelled";

    try {
        String updateSql = "UPDATE orders SET Status = ? WHERE OrderID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateSql)) {
            pstmt.setString(1, newStatus);
            pstmt.setInt(2, OrderID);
            int rowsUpdated = pstmt.executeUpdate();

            if (rowsUpdated > 0) {
               
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.removeRow(selectedRow);

                JOptionPane.showMessageDialog(this, "Order cancelled and removed from list successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Cancellation failed.");
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error cancelling order.");
    }
    }//GEN-LAST:event_UpdateStatusActionPerformed

    private void HomeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButton1ActionPerformed
        isPaymentStatusActive = false;
        CustomerDashboard obj = new CustomerDashboard();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeButton1ActionPerformed

    private void PaymentStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentStatusActionPerformed
       if (!isPaymentStatusActive) {
        isPaymentStatusActive = true;

        try {
            String sql = "SELECT OrderID, ProductName, Quantity, TotalPrice, DeliveryAddress, OrderDate FROM orders WHERE IsPaid = 'Unpaid' AND PaymentMethod = 'Gcash'";
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {

                DefaultTableModel model = new DefaultTableModel(
                        new String[]{"Order ID", "Product Name", "Quantity", "Total Price", "Delivery Address", "Order Date"}, 0);

                while (rs.next()) {
                    model.addRow(new Object[]{
                            rs.getInt("OrderID"),
                            rs.getString("ProductName"),
                            rs.getInt("Quantity"),
                            rs.getDouble("TotalPrice"),
                            rs.getString("DeliveryAddress"),
                            rs.getDate("OrderDate")
                    });
                }

                jTable1.setModel(model); // Set the model after loading
                JOptionPane.showMessageDialog(this, "Note: Only unpaid GCash orders are shown.\nSelect a row to confirm GCash payment.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading GCash unpaid orders.");
        }

    } else {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an order row for GCash payment.");
            return;
        }

        int orderID = (int) jTable1.getValueAt(selectedRow, 0);

                 
             String gcashName = JOptionPane.showInputDialog(null, "Enter GCash Name:");
             if (gcashName == null || gcashName.trim().isEmpty()) return;

             String gcashNumber = JOptionPane.showInputDialog(null, "Enter GCash Number:");
             if (gcashNumber == null || gcashNumber.trim().isEmpty()) return;

          
             if (!gcashNumber.matches("\\d{11}")) {
                 JOptionPane.showMessageDialog(null, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                 return;
             }

             String gcashAmountStr = JOptionPane.showInputDialog(null, "Enter GCash Amount:");
             if (gcashAmountStr == null || gcashAmountStr.trim().isEmpty()) return;

             double gcashAmount;
             try {
                 gcashAmount = Double.parseDouble(gcashAmountStr);
             } catch (NumberFormatException ex) {
                 JOptionPane.showMessageDialog(null, "Invalid GCash amount entered!");
                 return;
             }

            
             JOptionPane.showMessageDialog(null,
                     "Please send P" + String.format("%.2f", gcashAmount) +
                     " to the Admin's GCash Number: 09358969415\n" +
                     "Then wait for admin verification.",
                     "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);


       
        try {
            conn.setAutoCommit(false); 

          
            String updateSql = "UPDATE orders SET IsPaid = 'Unpaid' WHERE OrderID = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(updateSql)) {
                pstmt.setInt(1, orderID);
                int rowsUpdated = pstmt.executeUpdate();

                if (rowsUpdated > 0) {
                    
                    String insertGcashSql = "INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)";
                    try (PreparedStatement gcashStmt = conn.prepareStatement(insertGcashSql)) {
                        gcashStmt.setInt(1, orderID);
                        gcashStmt.setString(2, gcashName);
                        gcashStmt.setString(3, gcashNumber);
                        gcashStmt.setDouble(4, gcashAmount);
                        gcashStmt.executeUpdate();
                    }

                    conn.commit(); 

                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.removeRow(selectedRow);
                    JOptionPane.showMessageDialog(null, "GCash payment confirmed and saved. Order marked as 'Paid'.");
                    isPaymentStatusActive = false;
                } else {
                    conn.rollback(); 
                    JOptionPane.showMessageDialog(null, "Failed to update payment status.");
                }
            }
        } catch (SQLException ex) {
            try {
                conn.rollback(); 
            } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
            }
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving GCash payment.");
        } finally {
            try {
                conn.setAutoCommit(true); 
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    }//GEN-LAST:event_PaymentStatusActionPerformed

    private void CODRefundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CODRefundActionPerformed
      isPaymentStatusActive = false;

    if (isFirstClick) {
      
        try {
            String sql = "SELECT OrderID, ProductName, Quantity, TotalPrice, IsPaid, Status FROM orders " +
                         "WHERE PaymentMethod = 'Cash on Delivery' AND IsPaid = 'Paid' AND (Status = 'Delivered' OR Status = 'Completed')";
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {

              
                DefaultTableModel model = new DefaultTableModel(
                    new Object[]{"Order ID", "Product Name", "Quantity", "Total Price", "Payment Status", "Order Status"}, 0
                );

                while (rs.next()) {
                    int orderId = rs.getInt("OrderID");
                    String productName = rs.getString("ProductName");
                    int quantity = rs.getInt("Quantity");
                    double totalPrice = rs.getDouble("TotalPrice");
                    String isPaid = rs.getString("IsPaid");
                    String status = rs.getString("Status");

                    model.addRow(new Object[]{orderId, productName, quantity, totalPrice, isPaid, status});
                }

                jTable1.setModel(model); 
            }
            JOptionPane.showMessageDialog(this, "Completed and Delivered COD orders loaded. Now select an order to refund.");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading completed and delivered orders: " + e.getMessage());
        }

        isFirstClick = false; 
    } else {
      
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to refund.");
            return;
        }

        int OrderID = (int) jTable1.getValueAt(selectedRow, 0);

        String paymentMethod = "";
        double totalAmount = 0.0;
        String customerName = "";
        String customerMobile = "";

        try {
           
            String orderSQL = "SELECT PaymentMethod, TotalPrice FROM orders WHERE OrderID = ?";
            try (PreparedStatement stmt = conn.prepareStatement(orderSQL)) {
                stmt.setInt(1, OrderID);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        paymentMethod = rs.getString("PaymentMethod");
                        totalAmount = rs.getDouble("TotalPrice");
                    } else {
                        JOptionPane.showMessageDialog(this, "Order not found.");
                        return;
                    }
                }
            }

            if (!"Cash on Delivery".equalsIgnoreCase(paymentMethod)) {
                JOptionPane.showMessageDialog(this, "Refund is only supported for Cash on Delivery payments.");
                return;
            }

           
            String customerSQL = "SELECT c.Name, c.MobileNumber " +
                                 "FROM customer c " +
                                 "INNER JOIN orders o ON c.CustomerID = o.CustomerID " +
                                 "WHERE o.OrderID = ?";
            try (PreparedStatement stmt = conn.prepareStatement(customerSQL)) {
                stmt.setInt(1, OrderID);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        customerName = rs.getString("Name");
                        customerMobile = rs.getString("MobileNumber");
                    } else {
                        JOptionPane.showMessageDialog(this, "Customer details not found.");
                        return;
                    }
                }
            }

           
            String[] reasons = {
                "Damaged furniture",
                "Wrong item delivered",
                "Late delivery",
                "Customer changed mind",
                "Other"
            };
            String refundReason = (String) JOptionPane.showInputDialog(
                    this,
                    "Select a reason for the refund:",
                    "Refund Reason",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    reasons,
                    reasons[0]
            );

            if (refundReason == null || refundReason.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Refund cancelled. Reason is required.");
                return;
            }

           
            JOptionPane.showMessageDialog(this,
                    "Refund of ₱" + totalAmount +
                            " has been issued to: " + customerName +
                            "\nMobile: " + customerMobile +
                            "\nReason: " + refundReason,
                    "COD Refund", JOptionPane.INFORMATION_MESSAGE);

           
            String insertRefundSQL = "INSERT INTO refundorders_cod (OrderID, PaymentMethod, TotalAmount, CustomerName, CustomerMobile, Reason, RefundDate) VALUES (?, ?, ?, ?, ?, ?, NOW())";
            try (PreparedStatement refundStmt = conn.prepareStatement(insertRefundSQL)) {
                refundStmt.setInt(1, OrderID);
                refundStmt.setString(2, paymentMethod);
                refundStmt.setDouble(3, totalAmount);
                refundStmt.setString(4, customerName);
                refundStmt.setString(5, customerMobile);
                refundStmt.setString(6, refundReason);
                refundStmt.executeUpdate();
            }

          
            String updateOrderSQL = "UPDATE orders SET Status = 'Refunded' WHERE OrderID = ?";
            try (PreparedStatement updateStmt = conn.prepareStatement(updateOrderSQL)) {
                updateStmt.setInt(1, OrderID);
                updateStmt.executeUpdate();
            }

           
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.removeRow(selectedRow);

            JOptionPane.showMessageDialog(this, "COD order refunded and status updated successfully.");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error during refund: " + e.getMessage());
        }

        isFirstClick = true;
    }
    }//GEN-LAST:event_CODRefundActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new Orders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CODRefund;
    private javax.swing.JButton GcashRefund;
    private javax.swing.JButton HomeButton1;
    private javax.swing.JButton PaymentStatus;
    private javax.swing.JButton UpdateQuantity;
    private javax.swing.JButton UpdateStatus;
    private javax.swing.JButton ViewDetailsbtn;
    private javax.swing.JButton btnorders;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton updateAddressbtn;
    // End of variables declaration//GEN-END:variables
}
