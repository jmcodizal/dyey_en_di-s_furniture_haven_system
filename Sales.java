
package UI;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.time.Day;
import org.jfree.data.time.Week;
import org.jfree.data.time.Month;
import org.jfree.data.time.Year;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.time.LocalDate;
import DB.DBConnector;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.jfree.chart.ChartFrame;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.general.DefaultPieDataset;
/**
 *
 * @author Jessa Mae Codizal
 */
public class Sales extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;
    /**
     * Creates new form Sales
     */
    public Sales() {
        initComponents();
        DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
        
       
    }
    private void showChart(JFreeChart chart) {
    ChartPanel panel = new ChartPanel(chart);
    panel.setPreferredSize(new Dimension(800, 500));
    jPanel1.removeAll();
    jPanel1.setLayout(new BorderLayout());
    jPanel1.add(panel, BorderLayout.CENTER);
    jPanel1.validate();
}
    private String getMonthName(int month) {
        return java.time.Month.of(month).getDisplayName(java.time.format.TextStyle.FULL, java.util.Locale.ENGLISH);
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        HomeButton1 = new javax.swing.JButton();
        SalesPerMonth = new javax.swing.JButton();
        SalesPerYear = new javax.swing.JButton();
        SalesPerDay = new javax.swing.JButton();
        SalesPerWeek = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(140, 122, 107));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel15.setText("    HAVEN");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 110, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel16.setText("DYEY");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 60, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel17.setText("EN");
        jPanel4.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 40, 30, -1));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel18.setText("DI'S");
        jPanel4.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 60, -1));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel19.setText("FURNITURE");
        jPanel4.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 110, -1));

        HomeButton1.setBackground(new java.awt.Color(180, 100, 100));
        HomeButton1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        HomeButton1.setForeground(new java.awt.Color(255, 255, 255));
        HomeButton1.setText("EXIT");
        HomeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(HomeButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 620, 180, 50));

        SalesPerMonth.setBackground(new java.awt.Color(101, 101, 101));
        SalesPerMonth.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        SalesPerMonth.setForeground(new java.awt.Color(255, 255, 255));
        SalesPerMonth.setText("Sales per Month");
        SalesPerMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalesPerMonthActionPerformed(evt);
            }
        });
        jPanel4.add(SalesPerMonth, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, 180, 50));

        SalesPerYear.setBackground(new java.awt.Color(101, 101, 101));
        SalesPerYear.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        SalesPerYear.setForeground(new java.awt.Color(255, 255, 255));
        SalesPerYear.setText("Sales per Year");
        SalesPerYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalesPerYearActionPerformed(evt);
            }
        });
        jPanel4.add(SalesPerYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 180, 50));

        SalesPerDay.setBackground(new java.awt.Color(101, 101, 101));
        SalesPerDay.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        SalesPerDay.setForeground(new java.awt.Color(255, 255, 255));
        SalesPerDay.setText("Sales per Day");
        SalesPerDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalesPerDayActionPerformed(evt);
            }
        });
        jPanel4.add(SalesPerDay, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 180, 50));

        SalesPerWeek.setBackground(new java.awt.Color(101, 101, 101));
        SalesPerWeek.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        SalesPerWeek.setForeground(new java.awt.Color(255, 255, 255));
        SalesPerWeek.setText("Sales per Week");
        SalesPerWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalesPerWeekActionPerformed(evt);
            }
        });
        jPanel4.add(SalesPerWeek, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 180, 50));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 700));

        jLabel2.setFont(new java.awt.Font("Serif", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DYEY EN DI'S FURNITURE HAVEN");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 30, -1, -1));

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Sales");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 80, -1, -1));

        jPanel1.setBackground(new java.awt.Color(140, 122, 107));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, 1050, 540));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 1180, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButton1ActionPerformed
        AdminDashboard obj = new AdminDashboard();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeButton1ActionPerformed

    private void SalesPerMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalesPerMonthActionPerformed
       String[] options = {"Sales per Month", "Sales for Particular Month"};
    String choice = (String) JOptionPane.showInputDialog(
            this,
            "Choose an option:",
            "Sales Per Month Options",
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]
    );

    if (choice == null) return; 

    if (choice.equals("Sales for Particular Month")) {
        String inputYear = JOptionPane.showInputDialog(this, "Enter year (e.g., 2024):");
        String inputMonth = JOptionPane.showInputDialog(this, "Enter month (1-12):");

        if (inputYear == null || inputMonth == null || inputYear.isEmpty() || inputMonth.isEmpty()) return;

        String sql = "SELECT SUM(TotalPrice) AS total_sales FROM orders WHERE YEAR(OrderDate) = ? AND MONTH(OrderDate) = ?";
        try {
            pst = conn.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(inputYear));
            pst.setInt(2, Integer.parseInt(inputMonth));
            rst = pst.executeQuery();

            if (rst.next()) {
                double totalSales = rst.getDouble("total_sales");
                JOptionPane.showMessageDialog(this,
                        "Total Sales for " + getMonthName(Integer.parseInt(inputMonth)) + " " + inputYear + ": â‚±" + String.format("%,.2f", totalSales));
            } else {
                JOptionPane.showMessageDialog(this, "No sales data found for that month.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        return;
    }

    
    String sql = "SELECT YEAR(OrderDate) as year, MONTH(OrderDate) as month, SUM(TotalPrice) AS total_sales " +
                 "FROM orders GROUP BY year, month ORDER BY year, month";

    try {
        pst = conn.prepareStatement(sql);
        rst = pst.executeQuery();

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        while (rst.next()) {
            int year = rst.getInt("year");
            int month = rst.getInt("month");
            double sales = rst.getDouble("total_sales");
            String label = getMonthName(month) + " " + year;
            dataset.addValue(sales, "Sales", label);
        }

        JFreeChart chart = ChartFactory.createBarChart(
                "Sales per Month",
                "Month",
                "Sales Amount",
                dataset,
                PlotOrientation.VERTICAL,
                false, true, false
        );

        ChartPanel chartPanel = new ChartPanel(chart);
        jPanel1.removeAll();
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(chartPanel, java.awt.BorderLayout.CENTER);
        jPanel1.validate();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    
    
    }//GEN-LAST:event_SalesPerMonthActionPerformed

    private void SalesPerYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalesPerYearActionPerformed
        String[] options = {"Sales per Year", "Sales for Particular Year"};
    String choice = (String) JOptionPane.showInputDialog(
            this,
            "Choose an option:",
            "Sales Per Year Options",
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]
    );

    if (choice == null) return; 

    if (choice.equals("Sales for Particular Year")) {
        String inputYear = JOptionPane.showInputDialog(this, "Enter year (e.g., 2024):");

        if (inputYear == null || inputYear.isEmpty()) return;

        String sql = "SELECT SUM(TotalPrice) AS total_sales FROM orders WHERE YEAR(OrderDate) = ?";
        try {
            pst = conn.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(inputYear));
            rst = pst.executeQuery();

            if (rst.next()) {
                double totalSales = rst.getDouble("total_sales");
                JOptionPane.showMessageDialog(this,
                        "Total Sales for " + inputYear + ": â‚±" + String.format("%,.2f", totalSales));
            } else {
                JOptionPane.showMessageDialog(this, "No sales data found for that year.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        return;
    }

 
    String sql = "SELECT YEAR(OrderDate) as year, SUM(TotalPrice) AS total_sales " +
                 "FROM orders GROUP BY year ORDER BY year";

    try {
        pst = conn.prepareStatement(sql);
        rst = pst.executeQuery();

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        while (rst.next()) {
            int year = rst.getInt("year");
            double sales = rst.getDouble("total_sales");
            dataset.addValue(sales, "Sales", String.valueOf(year));
        }

        JFreeChart chart = ChartFactory.createBarChart(
                "Sales per Year",
                "Year",
                "Sales Amount",
                dataset,
                PlotOrientation.VERTICAL,
                false, true, false
        );

        ChartPanel chartPanel = new ChartPanel(chart);
        jPanel1.removeAll();
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(chartPanel, java.awt.BorderLayout.CENTER);
        jPanel1.validate();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_SalesPerYearActionPerformed

    private void SalesPerDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalesPerDayActionPerformed
      String[] mainOptions = {"Sales per Day", "Sales for Particular Day"};
    String mainChoice = (String) JOptionPane.showInputDialog(
            this,
            "Choose an option:",
            "Sales Options",
            JOptionPane.QUESTION_MESSAGE,
            null,
            mainOptions,
            mainOptions[0]
    );

    if (mainChoice == null) return; 

    if (mainChoice.equals("Sales for Particular Day")) {
        String inputDate = JOptionPane.showInputDialog(this, "Enter date (YYYY-MM-DD):");
        if (inputDate == null || inputDate.isEmpty()) return; 

        String sql = "SELECT SUM(TotalPrice) AS total_sales FROM orders WHERE DATE(OrderDate) = ?";
        try {
            pst = conn.prepareStatement(sql);
            pst.setDate(1, java.sql.Date.valueOf(inputDate));
            rst = pst.executeQuery();

            if (rst.next()) {
                double totalSales = rst.getDouble("total_sales");
                JOptionPane.showMessageDialog(this,
                        "Total Sales on " + inputDate + ": â‚±" + String.format("%.2f", totalSales));
            } else {
                JOptionPane.showMessageDialog(this, "No sales data found for " + inputDate);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        return;  
    }

    String sql = "SELECT DATE(OrderDate) AS order_date, SUM(TotalPrice) AS total_sales " +
                 "FROM orders GROUP BY DATE(OrderDate) ORDER BY order_date";
    String chartTitle = "Sales per Day";
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    try {
        pst = conn.prepareStatement(sql);
        rst = pst.executeQuery();
        
        SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat outputFormat = new SimpleDateFormat("MM-dd");

        while (rst.next()) {
            String orderDateStr = rst.getString("order_date");
            double totalSales = rst.getDouble("total_sales");

            try {
                java.util.Date parsedDate = inputFormat.parse(orderDateStr); // parse from 'yyyy-MM-dd'
                String formattedDate = outputFormat.format(parsedDate);       // format to 'MM-dd'
                dataset.addValue(totalSales, "Sales", formattedDate);
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }

        JFreeChart chart = ChartFactory.createBarChart(
                chartTitle,       
                "Date",         
                "Sales Amount",    
                dataset,         
                PlotOrientation.VERTICAL, 
                false,           
                true,            
                false            
        );

        ChartPanel chartPanel = new ChartPanel(chart);
        jPanel1.removeAll();
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(chartPanel, BorderLayout.CENTER);
        jPanel1.validate();  

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_SalesPerDayActionPerformed

    private void SalesPerWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalesPerWeekActionPerformed
        String[] options = {"Sales per Week", "Sales for Particular Week"};
    String choice = (String) JOptionPane.showInputDialog(
            this,
            "Choose an option:",
            "Sales Per Week Options",
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]
    );

    if (choice == null) return; 

    if (choice.equals("Sales for Particular Week")) {
        String startDate = JOptionPane.showInputDialog(this, "Enter start date (YYYY-MM-DD):");
        String endDate = JOptionPane.showInputDialog(this, "Enter end date (YYYY-MM-DD):");

        if (startDate == null || endDate == null || startDate.isEmpty() || endDate.isEmpty()) return;

        String sql = "SELECT SUM(TotalPrice) AS total_sales " +
                     "FROM orders WHERE OrderDate BETWEEN ? AND ?";
        try {
            pst = conn.prepareStatement(sql);
            pst.setString(1, startDate);
            pst.setString(2, endDate);
            rst = pst.executeQuery();

            if (rst.next()) {
                double totalSales = rst.getDouble("total_sales");
                JOptionPane.showMessageDialog(this,
                        "Total Sales from " + startDate + " to " + endDate + ": â‚±" + String.format("%.2f", totalSales));
            } else {
                JOptionPane.showMessageDialog(this, "No sales data found for that period.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        return;
    }

    
    try {
        String sql = "SELECT MIN(OrderDate) as minDate, MAX(OrderDate) as maxDate FROM orders";
        pst = conn.prepareStatement(sql);
        rst = pst.executeQuery();
        java.sql.Date minDate = null, maxDate = null;
        if (rst.next()) {
            minDate = rst.getDate("minDate");
            maxDate = rst.getDate("maxDate");
        }

        if (minDate == null || maxDate == null) {
            JOptionPane.showMessageDialog(this, "No sales data available.");
            return;
        }

        java.time.LocalDate start = minDate.toLocalDate();
        java.time.LocalDate end = maxDate.toLocalDate();

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        while (!start.isAfter(end)) {
            java.time.LocalDate weekEnd = start.plusDays(6); 
            if (weekEnd.isAfter(end)) {
                weekEnd = end;
            }

            String label = start.getMonth().toString().substring(0, 1).toUpperCase() + start.getMonth().toString().substring(1).toLowerCase() +
                           " " + start.getDayOfMonth() + " - " +
                           weekEnd.getMonth().toString().substring(0, 1).toUpperCase() + weekEnd.getMonth().toString().substring(1).toLowerCase() +
                           " " + weekEnd.getDayOfMonth();

            sql = "SELECT SUM(TotalPrice) AS total_sales FROM orders WHERE OrderDate BETWEEN ? AND ?";
            pst = conn.prepareStatement(sql);
            pst.setDate(1, java.sql.Date.valueOf(start));
            pst.setDate(2, java.sql.Date.valueOf(weekEnd));
            rst = pst.executeQuery();

            double totalSales = 0;
            if (rst.next()) {
                totalSales = rst.getDouble("total_sales");
            }

            dataset.addValue(totalSales, "Sales", label);

            start = weekEnd.plusDays(1);
        }

        JFreeChart chart = ChartFactory.createBarChart(
                "Sales per Week",
                "Week Range",
                "Sales Amount",
                dataset,
                PlotOrientation.VERTICAL,
                false, true, false
        );

        ChartPanel chartPanel = new ChartPanel(chart);
        jPanel1.removeAll();
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(chartPanel, java.awt.BorderLayout.CENTER);
        jPanel1.validate();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_SalesPerWeekActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HomeButton1;
    private javax.swing.JButton SalesPerDay;
    private javax.swing.JButton SalesPerMonth;
    private javax.swing.JButton SalesPerWeek;
    private javax.swing.JButton SalesPerYear;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
