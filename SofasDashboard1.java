
package UI;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import DB.DBConnector;
import OrderingSystem.SessionManager;
import UI.UpholsteredFurniture;
import java.sql.Statement;
import javax.swing.JTextField;
/**
 *
 * @author jessa
 */
public class SofasDashboard1 extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;
    /**
     * Creates new form SofasDashboard1
     */
    public SofasDashboard1() {
        initComponents();
        DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
        loadAllProductStocks();
    }
     private void loadStockIntoField(String productName, JTextField stockField) {
    try {
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, productName);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            int stock = rs.getInt("Stock");
            stockField.setText(String.valueOf(stock));
        } else {
            stockField.setText("N/A");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Failed to load stock: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void loadAllProductStocks() {
    loadStockIntoField("Green Sofa for Two Persons", GSS);  
    loadStockIntoField("Black Sofa for Two Persons", BSS);     
    loadStockIntoField("White Corner Sofa", WSS);
    loadStockIntoField("Blue Corner Sofa", BCSS);
   
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        BSAC = new javax.swing.JButton();
        BSPC = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        GSPC = new javax.swing.JButton();
        GSAC = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        GSS = new javax.swing.JTextField();
        BSS = new javax.swing.JTextField();
        GSQ = new javax.swing.JTextField();
        BSQ = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BCSAC = new javax.swing.JButton();
        BCSPC = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        WSPC = new javax.swing.JButton();
        WSAC = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        BCSS = new javax.swing.JTextField();
        WSS = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();
        WSQ = new javax.swing.JTextField();
        BCSQ = new javax.swing.JTextField();
        btnExit1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 102, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 153, 0));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Quantity");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 410, 80, -1));

        BSAC.setBackground(new java.awt.Color(101, 101, 101));
        BSAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BSAC.setForeground(new java.awt.Color(255, 255, 255));
        BSAC.setText("Add to Cart");
        BSAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSACActionPerformed(evt);
            }
        });
        jPanel3.add(BSAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 520, 180, 50));

        BSPC.setBackground(new java.awt.Color(101, 101, 101));
        BSPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BSPC.setForeground(new java.awt.Color(255, 255, 255));
        BSPC.setText("Proceed to Checkout");
        BSPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSPCActionPerformed(evt);
            }
        });
        jPanel3.add(BSPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 460, 180, 50));

        jTextArea4.setEditable(false);
        jTextArea4.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea4.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea4.setRows(5);
        jTextArea4.setText("Black Sofa for Two Persons\nA comfortable sofa for two persons.\nPrice: P1400.00\nMaterial: Plastic and Foam\nColor: Black");
        jScrollPane4.setViewportView(jTextArea4);

        jPanel3.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 300, -1, -1));

        jTextArea5.setEditable(false);
        jTextArea5.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea5.setColumns(20);
        jTextArea5.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea5.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea5.setRows(5);
        jTextArea5.setText("Green Sofa for Two Persons\nA compact two-seater sofa.\nPrice: P1300.00\nMaterial: Soft wood and Foam\nColor: Green");
        jScrollPane5.setViewportView(jTextArea5);

        jPanel3.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, -1, -1));

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Quantity");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 80, -1));

        GSPC.setBackground(new java.awt.Color(101, 101, 101));
        GSPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        GSPC.setForeground(new java.awt.Color(255, 255, 255));
        GSPC.setText("Proceed to Checkout");
        GSPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSPCActionPerformed(evt);
            }
        });
        jPanel3.add(GSPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 460, 180, 50));

        GSAC.setBackground(new java.awt.Color(101, 101, 101));
        GSAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        GSAC.setForeground(new java.awt.Color(255, 255, 255));
        GSAC.setText("Add to Cart");
        GSAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSACActionPerformed(evt);
            }
        });
        jPanel3.add(GSAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 520, 180, 50));

        jLabel10.setBackground(new java.awt.Color(255, 153, 0));
        jLabel10.setFont(new java.awt.Font("Serif", 3, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText(" Straight Corner");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, -1, -1));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/UpholsteredFurniture/476586535_604853762257949_7244142957709590023_n.jpg"))); // NOI18N
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 230, 180));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/UpholsteredFurniture/476569135_1304277114252508_213393179754349842_n.jpg"))); // NOI18N
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 230, 180));

        GSS.setEditable(false);
        GSS.setBackground(new java.awt.Color(230, 222, 210));
        GSS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        GSS.setForeground(new java.awt.Color(60, 60, 60));
        GSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSSActionPerformed(evt);
            }
        });
        jPanel3.add(GSS, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 400, 50, 50));

        BSS.setEditable(false);
        BSS.setBackground(new java.awt.Color(230, 222, 210));
        BSS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BSS.setForeground(new java.awt.Color(60, 60, 60));
        BSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSSActionPerformed(evt);
            }
        });
        jPanel3.add(BSS, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 400, 50, 50));

        GSQ.setBackground(new java.awt.Color(230, 222, 210));
        GSQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        GSQ.setForeground(new java.awt.Color(60, 60, 60));
        GSQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSQActionPerformed(evt);
            }
        });
        jPanel3.add(GSQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 400, 50, 50));

        BSQ.setBackground(new java.awt.Color(230, 222, 210));
        BSQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BSQ.setForeground(new java.awt.Color(60, 60, 60));
        BSQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSQActionPerformed(evt);
            }
        });
        jPanel3.add(BSQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 400, 50, 50));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bf1.png"))); // NOI18N
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 600));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 580, 600));

        jPanel2.setBackground(new java.awt.Color(255, 153, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Quantity");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 410, 80, -1));

        BCSAC.setBackground(new java.awt.Color(101, 101, 101));
        BCSAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BCSAC.setForeground(new java.awt.Color(255, 255, 255));
        BCSAC.setText("Add to Cart");
        BCSAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCSACActionPerformed(evt);
            }
        });
        jPanel2.add(BCSAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 520, 180, 50));

        BCSPC.setBackground(new java.awt.Color(101, 101, 101));
        BCSPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BCSPC.setForeground(new java.awt.Color(255, 255, 255));
        BCSPC.setText("Proceed to Checkout");
        BCSPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCSPCActionPerformed(evt);
            }
        });
        jPanel2.add(BCSPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 460, 180, 50));

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea2.setRows(5);
        jTextArea2.setText("Blue Corner Sofa\nA multifunctional sofa.\nPrice: P2450.00\nMaterial: Plastic and Foam\nColor: Blue");
        jScrollPane2.setViewportView(jTextArea2);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 300, -1, -1));

        jTextArea3.setEditable(false);
        jTextArea3.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea3.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea3.setRows(5);
        jTextArea3.setText("White Corner Sofa\nA large sectional sofa.\nPrice: P2250.00\nMaterial: Metal and Foam\nColor: White");
        jScrollPane3.setViewportView(jTextArea3);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Quantity");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 80, -1));

        WSPC.setBackground(new java.awt.Color(101, 101, 101));
        WSPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        WSPC.setForeground(new java.awt.Color(255, 255, 255));
        WSPC.setText("Proceed to Checkout");
        WSPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WSPCActionPerformed(evt);
            }
        });
        jPanel2.add(WSPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 460, 180, 50));

        WSAC.setBackground(new java.awt.Color(101, 101, 101));
        WSAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        WSAC.setForeground(new java.awt.Color(255, 255, 255));
        WSAC.setText("Add to Cart");
        WSAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WSACActionPerformed(evt);
            }
        });
        jPanel2.add(WSAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 520, 180, 50));

        jLabel6.setBackground(new java.awt.Color(255, 153, 0));
        jLabel6.setFont(new java.awt.Font("Serif", 3, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Corner Sofas");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/UpholsteredFurniture/476870415_595744506756195_4670185310646044019_n.jpg"))); // NOI18N
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 230, 180));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/UpholsteredFurniture/478143625_1144650540645472_5452921849932555018_n.jpg"))); // NOI18N
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, 230, 180));

        BCSS.setEditable(false);
        BCSS.setBackground(new java.awt.Color(230, 222, 210));
        BCSS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BCSS.setForeground(new java.awt.Color(60, 60, 60));
        BCSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCSSActionPerformed(evt);
            }
        });
        jPanel2.add(BCSS, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 400, 50, 50));

        WSS.setEditable(false);
        WSS.setBackground(new java.awt.Color(230, 222, 210));
        WSS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        WSS.setForeground(new java.awt.Color(60, 60, 60));
        WSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WSSActionPerformed(evt);
            }
        });
        jPanel2.add(WSS, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 400, 50, 50));

        btnExit.setBackground(new java.awt.Color(102, 102, 102));
        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        jPanel2.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 530, -1, -1));

        WSQ.setBackground(new java.awt.Color(230, 222, 210));
        WSQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        WSQ.setForeground(new java.awt.Color(60, 60, 60));
        WSQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WSQActionPerformed(evt);
            }
        });
        jPanel2.add(WSQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 400, 50, 50));

        BCSQ.setBackground(new java.awt.Color(230, 222, 210));
        BCSQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BCSQ.setForeground(new java.awt.Color(60, 60, 60));
        BCSQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCSQActionPerformed(evt);
            }
        });
        jPanel2.add(BCSQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 400, 50, 50));

        btnExit1.setBackground(new java.awt.Color(102, 102, 102));
        btnExit1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExit1.setText("Exit");
        btnExit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExit1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnExit1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 510, -1, -1));

        jButton1.setBackground(new java.awt.Color(180, 100, 100));
        jButton1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 550, -1, 50));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bf1.png"))); // NOI18N
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 600));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 80, 580, 600));

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 700));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BCSQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCSQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BCSQActionPerformed

    private void WSQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WSQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WSQActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        UpholsteredFurniture obj = new UpholsteredFurniture();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void WSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WSSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WSSActionPerformed

    private void BCSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCSSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BCSSActionPerformed

    private void WSACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WSACActionPerformed
        String ProductName = "White Corner Sofa";
        int price = 2250;
        int Quantity;

        try {
            Quantity = Integer.parseInt(WSQ.getText());
         
            int currentStock = 0;
            pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
            pst.setString(1, ProductName);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                currentStock = rs.getInt("Stock");
            }

            if (Quantity > currentStock) {
                JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double TotalPrice = Quantity * price;
            int customerID = SessionManager.getCustomerID();

          
            pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
            pst.setInt(1, customerID);
            pst.setString(2, ProductName);
            pst.setDouble(3, price);
            pst.setInt(4, Quantity);
            pst.setDouble(5, TotalPrice);
            int rowsInserted = pst.executeUpdate();

            
            int newStock = currentStock - Quantity;
            pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
            pst.setInt(1, newStock);
            pst.setString(2, ProductName);
            pst.executeUpdate();

           
            WSS.setText(String.valueOf(newStock));
            WSQ.setText("");

            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_WSACActionPerformed

    private void WSPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WSPCActionPerformed
        String ProductName = "White Corner Sofa";
        int price = 2250;
        int Quantity;
        String Status = "Pending";
        try {
            Quantity = Integer.parseInt(WSQ.getText());
            double TotalPrice = Quantity * price;

            int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

    if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
       
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}


    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    WSQ.setText("");
    WSS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_WSPCActionPerformed

    private void BCSPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCSPCActionPerformed
        String ProductName = "Blue Corner Sofa";
        int price = 2450;
        int Quantity;
        String Status = "Pending";
        try {
            Quantity = Integer.parseInt(BCSQ.getText());
            double TotalPrice = Quantity * price;
 int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

    if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) {
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
       
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}

    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    BCSQ.setText("");
    BCSS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_BCSPCActionPerformed

    private void BCSACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCSACActionPerformed
        String ProductName = "Blue Corner Sofa";
        int price = 2450;
        int Quantity;

        try {
            Quantity = Integer.parseInt(BCSQ.getText());
          
            int currentStock = 0;
            pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
            pst.setString(1, ProductName);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                currentStock = rs.getInt("Stock");
            }

            if (Quantity > currentStock) {
                JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double TotalPrice = Quantity * price;
            int customerID = SessionManager.getCustomerID();

           
            pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
            pst.setInt(1, customerID);
            pst.setString(2, ProductName);
            pst.setDouble(3, price);
            pst.setInt(4, Quantity);
            pst.setDouble(5, TotalPrice);
            int rowsInserted = pst.executeUpdate();

           
            int newStock = currentStock - Quantity;
            pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
            pst.setInt(1, newStock);
            pst.setString(2, ProductName);
            pst.executeUpdate();

           
            BCSS.setText(String.valueOf(newStock));
            BCSQ.setText("");

            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BCSACActionPerformed

    private void BSQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BSQActionPerformed

    private void GSQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GSQActionPerformed

    private void BSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BSSActionPerformed

    private void GSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GSSActionPerformed

    private void GSACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSACActionPerformed
        String ProductName = "Green Sofa for Two Persons";
        int price = 1300;
        int Quantity;

        try {
            Quantity = Integer.parseInt(GSQ.getText());
         
            int currentStock = 0;
            pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
            pst.setString(1, ProductName);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                currentStock = rs.getInt("Stock");
            }

            if (Quantity > currentStock) {
                JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double TotalPrice = Quantity * price;
            int customerID = SessionManager.getCustomerID();

          
            pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
            pst.setInt(1, customerID);
            pst.setString(2, ProductName);
            pst.setDouble(3, price);
            pst.setInt(4, Quantity);
            pst.setDouble(5, TotalPrice);
            int rowsInserted = pst.executeUpdate();

          
            int newStock = currentStock - Quantity;
            pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
            pst.setInt(1, newStock);
            pst.setString(2, ProductName);
            pst.executeUpdate();

           
            GSS.setText(String.valueOf(newStock));
            GSQ.setText("");

            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_GSACActionPerformed

    private void GSPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSPCActionPerformed
        String ProductName = "Green Sofa for Two Persons";
        int price = 1300;
        int Quantity;
        String Status = "Pending";
        try {
            Quantity = Integer.parseInt(GSQ.getText());
            double TotalPrice = Quantity * price;

             int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

    if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) {
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
      
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}


    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    GSQ.setText("");
    GSS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_GSPCActionPerformed

    private void BSPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSPCActionPerformed
        String ProductName = "Black Sofa for Two Persons";
        int price = 1400;
        int Quantity;
        String Status = "Pending";
        try {
            Quantity = Integer.parseInt(BSQ.getText());
            double TotalPrice = Quantity * price;

            int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

     if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
       
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}


    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    BSQ.setText("");
    BSS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_BSPCActionPerformed

    private void BSACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSACActionPerformed
        String ProductName = "Black Sofa for Two Persons";
        int price = 1400;
        int Quantity;

        try {
            Quantity = Integer.parseInt(BSQ.getText());

            int currentStock = 0;
            pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
            pst.setString(1, ProductName);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                currentStock = rs.getInt("Stock");
            }

            if (Quantity > currentStock) {
                JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double TotalPrice = Quantity * price;
            int customerID = SessionManager.getCustomerID();

           
            pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
            pst.setInt(1, customerID);
            pst.setString(2, ProductName);
            pst.setDouble(3, price);
            pst.setInt(4, Quantity);
            pst.setDouble(5, TotalPrice);
            int rowsInserted = pst.executeUpdate();

          
            int newStock = currentStock - Quantity;
            pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
            pst.setInt(1, newStock);
            pst.setString(2, ProductName);
            pst.executeUpdate();

          
            BSS.setText(String.valueOf(newStock));
            BSQ.setText("");

            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BSACActionPerformed

    private void btnExit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExit1ActionPerformed
        BathroomDashboard obj = new BathroomDashboard();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnExit1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        UpholsteredFurniture obj = new UpholsteredFurniture();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SofasDashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SofasDashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SofasDashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SofasDashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SofasDashboard1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BCSAC;
    private javax.swing.JButton BCSPC;
    private javax.swing.JTextField BCSQ;
    private javax.swing.JTextField BCSS;
    private javax.swing.JButton BSAC;
    private javax.swing.JButton BSPC;
    private javax.swing.JTextField BSQ;
    private javax.swing.JTextField BSS;
    private javax.swing.JButton GSAC;
    private javax.swing.JButton GSPC;
    private javax.swing.JTextField GSQ;
    private javax.swing.JTextField GSS;
    private javax.swing.JButton WSAC;
    private javax.swing.JButton WSPC;
    private javax.swing.JTextField WSQ;
    private javax.swing.JTextField WSS;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnExit1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    // End of variables declaration//GEN-END:variables
}
