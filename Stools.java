
package UI;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import DB.DBConnector;
import OrderingSystem.SessionManager;
import UI.TablesChairs;
import java.sql.Statement;
import javax.swing.JTextField;
/**
 *
 * @author jessa
 */
public class Stools extends javax.swing.JFrame {
Connection conn;
PreparedStatement pst;
ResultSet rst;
    /**
     * Creates new form Stools
     */
    public Stools() {
        initComponents();
        DBConnector mycon = new DBConnector();
        conn = DBConnector.getCon();
        loadAllProductStocks();
    }
    private void loadStockIntoField(String productName, JTextField stockField) {
    try {
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, productName);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            int stock = rs.getInt("Stock");
            stockField.setText(String.valueOf(stock)); 
        } else {
            stockField.setText("N/A");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Failed to load stock: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void loadAllProductStocks() {
    loadStockIntoField("White Armless Stool", WASS);  
    loadStockIntoField("Brown Armless Stool", BASS);     
    loadStockIntoField("Bar Backless Stool", BBSS);
    loadStockIntoField("Bar Armless Stool", BSQS);
   
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        BSAC = new javax.swing.JButton();
        BSPC = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea10 = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea11 = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        BBSPC = new javax.swing.JButton();
        BBSAC = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        BBSS = new javax.swing.JTextField();
        BSQS = new javax.swing.JTextField();
        ExitButton = new javax.swing.JButton();
        ExitButton1 = new javax.swing.JButton();
        BBSQ = new javax.swing.JTextField();
        BSQQ = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        BASAC = new javax.swing.JButton();
        BASPC = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        WASPC = new javax.swing.JButton();
        WASAC = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        WASS = new javax.swing.JTextField();
        BASS = new javax.swing.JTextField();
        WASQ = new javax.swing.JTextField();
        BASQ = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 102, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBackground(new java.awt.Color(255, 153, 0));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel6.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        jLabel18.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Quantity");
        jPanel6.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 410, 80, -1));

        BSAC.setBackground(new java.awt.Color(101, 101, 101));
        BSAC.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BSAC.setForeground(new java.awt.Color(255, 255, 255));
        BSAC.setText("Add to Cart");
        BSAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSACActionPerformed(evt);
            }
        });
        jPanel6.add(BSAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 520, 180, 50));

        BSPC.setBackground(new java.awt.Color(101, 101, 101));
        BSPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BSPC.setForeground(new java.awt.Color(255, 255, 255));
        BSPC.setText("Proceed to Checkout");
        BSPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSPCActionPerformed(evt);
            }
        });
        jPanel6.add(BSPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 460, 180, 50));

        jTextArea10.setEditable(false);
        jTextArea10.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea10.setColumns(20);
        jTextArea10.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea10.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea10.setRows(5);
        jTextArea10.setText("Bar Armless Stool\nA sleek design bar stool.\nPrice: P650.00\nMaterial: Metal\nColor: Black");
        jScrollPane10.setViewportView(jTextArea10);

        jPanel6.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 300, -1, -1));

        jTextArea11.setEditable(false);
        jTextArea11.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea11.setColumns(20);
        jTextArea11.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea11.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea11.setRows(5);
        jTextArea11.setText("Bar Backless Stool\nA tall stool with or without a backrest.\nPrice: P550.00\nMaterial: Metal\nColor: Black");
        jScrollPane11.setViewportView(jTextArea11);

        jPanel6.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        jLabel19.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Quantity");
        jPanel6.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 80, -1));

        BBSPC.setBackground(new java.awt.Color(101, 101, 101));
        BBSPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BBSPC.setForeground(new java.awt.Color(255, 255, 255));
        BBSPC.setText("Proceed to Checkout");
        BBSPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBSPCActionPerformed(evt);
            }
        });
        jPanel6.add(BBSPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 460, 180, 50));

        BBSAC.setBackground(new java.awt.Color(101, 101, 101));
        BBSAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BBSAC.setForeground(new java.awt.Color(255, 255, 255));
        BBSAC.setText("Add to Cart");
        BBSAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBSACActionPerformed(evt);
            }
        });
        jPanel6.add(BBSAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 520, 180, 50));

        jLabel20.setBackground(new java.awt.Color(255, 153, 0));
        jLabel20.setFont(new java.awt.Font("Serif", 3, 36)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Bar Stools");
        jPanel6.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, -1, -1));

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TablesChairs/Bar Chairs.jpg"))); // NOI18N
        jPanel6.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 230, 180));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TablesChairs/Bar Chairs (2).jpg"))); // NOI18N
        jPanel6.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, 230, 180));

        BBSS.setEditable(false);
        BBSS.setBackground(new java.awt.Color(230, 222, 210));
        BBSS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BBSS.setForeground(new java.awt.Color(60, 60, 60));
        BBSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBSSActionPerformed(evt);
            }
        });
        jPanel6.add(BBSS, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 400, 50, 50));

        BSQS.setEditable(false);
        BSQS.setBackground(new java.awt.Color(230, 222, 210));
        BSQS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BSQS.setForeground(new java.awt.Color(60, 60, 60));
        BSQS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSQSActionPerformed(evt);
            }
        });
        jPanel6.add(BSQS, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 400, 50, 50));

        ExitButton.setBackground(new java.awt.Color(153, 102, 0));
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        jPanel6.add(ExitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 510, -1, -1));

        ExitButton1.setBackground(new java.awt.Color(180, 100, 100));
        ExitButton1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        ExitButton1.setForeground(new java.awt.Color(255, 255, 255));
        ExitButton1.setText("Exit");
        ExitButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButton1ActionPerformed(evt);
            }
        });
        jPanel6.add(ExitButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 550, -1, 50));

        BBSQ.setBackground(new java.awt.Color(230, 222, 210));
        BBSQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BBSQ.setForeground(new java.awt.Color(60, 60, 60));
        BBSQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBSQActionPerformed(evt);
            }
        });
        jPanel6.add(BBSQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 400, 50, 50));

        BSQQ.setBackground(new java.awt.Color(230, 222, 210));
        BSQQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BSQQ.setForeground(new java.awt.Color(60, 60, 60));
        BSQQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSQQActionPerformed(evt);
            }
        });
        jPanel6.add(BSQQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 400, 50, 50));

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bf1.png"))); // NOI18N
        jPanel6.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 600));

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 80, 580, 600));

        jPanel4.setBackground(new java.awt.Color(255, 153, 0));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Quantity");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 410, 80, -1));

        BASAC.setBackground(new java.awt.Color(101, 101, 101));
        BASAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BASAC.setForeground(new java.awt.Color(255, 255, 255));
        BASAC.setText("Add to Cart");
        BASAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BASACActionPerformed(evt);
            }
        });
        jPanel4.add(BASAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 520, 180, 50));

        BASPC.setBackground(new java.awt.Color(101, 101, 101));
        BASPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        BASPC.setForeground(new java.awt.Color(255, 255, 255));
        BASPC.setText("Proceed to Checkout");
        BASPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BASPCActionPerformed(evt);
            }
        });
        jPanel4.add(BASPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 460, 180, 50));

        jTextArea6.setEditable(false);
        jTextArea6.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea6.setColumns(20);
        jTextArea6.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea6.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea6.setRows(5);
        jTextArea6.setText("Brown Armless Stool\nA simple, space-saving stool.\nPrice: P350.00\nMaterial: Wood\nColor: Brown");
        jScrollPane6.setViewportView(jTextArea6);

        jPanel4.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 300, -1, -1));

        jTextArea7.setEditable(false);
        jTextArea7.setBackground(new java.awt.Color(230, 222, 210));
        jTextArea7.setColumns(20);
        jTextArea7.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextArea7.setForeground(new java.awt.Color(60, 60, 60));
        jTextArea7.setRows(5);
        jTextArea7.setText("White Armless Stool\nA compact, sturdy stool.\nPrice: P250.00\nMaterial: Plastic\nColor: White");
        jScrollPane7.setViewportView(jTextArea7);

        jPanel4.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, -1, -1));

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Quantity");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, 80, -1));

        WASPC.setBackground(new java.awt.Color(101, 101, 101));
        WASPC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        WASPC.setForeground(new java.awt.Color(255, 255, 255));
        WASPC.setText("Proceed to Checkout");
        WASPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WASPCActionPerformed(evt);
            }
        });
        jPanel4.add(WASPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 460, 180, 50));

        WASAC.setBackground(new java.awt.Color(101, 101, 101));
        WASAC.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        WASAC.setForeground(new java.awt.Color(255, 255, 255));
        WASAC.setText("Add to Cart");
        WASAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WASACActionPerformed(evt);
            }
        });
        jPanel4.add(WASAC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 520, 180, 50));

        jLabel13.setBackground(new java.awt.Color(255, 153, 0));
        jLabel13.setFont(new java.awt.Font("Serif", 3, 36)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Armless Stools");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TablesChairs/Chairs.jpg"))); // NOI18N
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 230, 180));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TablesChairs/Chairs (2).jpg"))); // NOI18N
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 230, 180));

        WASS.setEditable(false);
        WASS.setBackground(new java.awt.Color(230, 222, 210));
        WASS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        WASS.setForeground(new java.awt.Color(60, 60, 60));
        WASS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WASSActionPerformed(evt);
            }
        });
        jPanel4.add(WASS, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 400, 50, 50));

        BASS.setEditable(false);
        BASS.setBackground(new java.awt.Color(230, 222, 210));
        BASS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BASS.setForeground(new java.awt.Color(60, 60, 60));
        BASS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BASSActionPerformed(evt);
            }
        });
        jPanel4.add(BASS, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 400, 50, 50));

        WASQ.setBackground(new java.awt.Color(230, 222, 210));
        WASQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        WASQ.setForeground(new java.awt.Color(60, 60, 60));
        WASQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WASQActionPerformed(evt);
            }
        });
        jPanel4.add(WASQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 400, 50, 50));

        BASQ.setBackground(new java.awt.Color(230, 222, 210));
        BASQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BASQ.setForeground(new java.awt.Color(60, 60, 60));
        BASQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BASQActionPerformed(evt);
            }
        });
        jPanel4.add(BASQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 400, 50, 50));

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bf1.png"))); // NOI18N
        jPanel4.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 600));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 580, 600));

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.jpg"))); // NOI18N
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 700));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BSACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSACActionPerformed
  String ProductName = "Bar Armless Stool";
        int price = 650;
        int Quantity;
        
       try {
        Quantity = Integer.parseInt(BSQQ.getText());
       
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

      
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

       
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

       
        BSQS.setText(String.valueOf(newStock));
        BSQQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_BSACActionPerformed

    private void BSPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSPCActionPerformed
        String ProductName = "Bar Armless Stool";
        int price = 650;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(BSQQ.getText());
        double TotalPrice = Quantity * price;

      int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

   if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
      
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}

    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    BSQQ.setText("");
    BSQS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_BSPCActionPerformed

    private void BBSPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBSPCActionPerformed
        String ProductName = "Bar Backless Stool";
        int price = 550;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(BBSQ.getText());
        double TotalPrice = Quantity * price;

        int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

    if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
       
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}

    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    BBSQ.setText("");
    BBSS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_BBSPCActionPerformed

    private void BBSACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBSACActionPerformed
 String ProductName = "Bar Backless Stool";
        int price = 550;
        int Quantity;
         
        try {
        Quantity = Integer.parseInt(BBSQ.getText());
      
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

      
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

       
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

      
        BBSS.setText(String.valueOf(newStock));
        BBSQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_BBSACActionPerformed

    private void BBSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBSSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BBSSActionPerformed

    private void BSQSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSQSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BSQSActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        TablesChairs obj = new TablesChairs();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void BASSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BASSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BASSActionPerformed

    private void WASSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WASSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WASSActionPerformed

    private void WASACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WASACActionPerformed
String ProductName = "White Armless Stool";
        int price = 250;
        int Quantity;
         
         try {
        Quantity = Integer.parseInt(WASQ.getText());
      
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

       
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

       
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

        
        WASS.setText(String.valueOf(newStock));
        WASQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_WASACActionPerformed

    private void WASPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WASPCActionPerformed
        String ProductName = "White Armless Stool";
        int price = 250;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(WASQ.getText());
        double TotalPrice = Quantity * price;

         int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

    if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
      
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}


    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    WASQ.setText("");
    WASS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_WASPCActionPerformed

    private void BASPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BASPCActionPerformed
        String ProductName = "Brown Armless Stool";
        int price = 350;
        int Quantity;
        String Status = "Pending";
         try {
        Quantity = Integer.parseInt(BASQ.getText());
        double TotalPrice = Quantity * price;

       int currentStock = 0;
    int productID = -1;

    
    pst = conn.prepareStatement("SELECT ProductID, Stock FROM products WHERE ProductName = ?");
    pst.setString(1, ProductName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        productID = rs.getInt("ProductID");
        currentStock = rs.getInt("Stock");
    } else {
        JOptionPane.showMessageDialog(this, "Product not found in the database.");
        return;
    }

    if (Quantity > currentStock) {
        JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String receiptMessage = "Product: " + ProductName +
                            "\nQuantity: " + Quantity +
                            "\nTotal Price: P" + TotalPrice +
                            "\n\nDo you confirm this order?";
    int confirm = JOptionPane.showConfirmDialog(this, receiptMessage, "Confirm Order", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "Order Canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String deliveryAddress = JOptionPane.showInputDialog(this, "Enter Delivery Address:");
    if (deliveryAddress == null || deliveryAddress.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Delivery address is required.", "Missing Address", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] paymentOptions = { "Cash on Delivery", "Gcash" };
    String paymentMethod = (String) JOptionPane.showInputDialog(this, "Select Payment Method:", "Payment Method", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);
    if (paymentMethod == null) return;

    double finalTotal = TotalPrice;
    double shippingFee = 0, change = 0, amountGiven = 0;
    String gcashName = "", gcashNumber = "";
    String paymentStatus = "Unpaid";

    if (paymentMethod.equals("Gcash")) {
    String[] gcashOptions = { "Pay Now", "Pay Later" };
    int gcashChoice = JOptionPane.showOptionDialog(this, "Choose GCash payment option:", "GCash Payment",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, gcashOptions, gcashOptions[0]);

    if (gcashChoice == 0) { 
        gcashName = JOptionPane.showInputDialog(this, "Enter Gcash Name:");
        gcashNumber = JOptionPane.showInputDialog(this, "Enter Gcash Number:");
        
      
        if (gcashNumber == null || gcashNumber.length() != 11 || !gcashNumber.matches("\\d{11}")) {
            JOptionPane.showMessageDialog(this, "Invalid GCash number. Please enter an 11-digit number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = JOptionPane.showInputDialog(this, "Enter Amount to Pay:");
        if (gcashName == null || amountStr == null) return;

        amountGiven = Double.parseDouble(amountStr);
        if (amountGiven < TotalPrice) {
            JOptionPane.showMessageDialog(this, "Amount is less than total price!", "Payment Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        change = amountGiven - TotalPrice;
        JOptionPane.showMessageDialog(this,
                "Please send P" + String.format("%.2f", amountGiven) +
                " to the Admin's GCash Number: 09358968415\n" +
                "Then wait for admin verification.",
                "Send Payment via GCash", JOptionPane.INFORMATION_MESSAGE);

        paymentStatus = "Unpaid";
    } else if (gcashChoice == 1) {
        paymentStatus = "Unpaid";
    } else {
        return;
    }
} else {
    shippingFee = 50;
    finalTotal += shippingFee;
    paymentStatus = "Unpaid";
}

    int customerID = SessionManager.getCustomerID();
    java.time.LocalDate today = java.time.LocalDate.now();
    java.sql.Date orderDateSQL = java.sql.Date.valueOf(today);

    
    int orderId = -1;
    pst = conn.prepareStatement(
        "INSERT INTO orders (CustomerID, ProductID, ProductName, Quantity, TotalPrice, PaymentMethod, DeliveryAddress, Status, OrderDate, IsPaid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        Statement.RETURN_GENERATED_KEYS
    );
    pst.setInt(1, customerID);
    pst.setInt(2, productID);  
    pst.setString(3, ProductName);
    pst.setInt(4, Quantity);
    pst.setDouble(5, finalTotal);
    pst.setString(6, paymentMethod);
    pst.setString(7, deliveryAddress);
    pst.setString(8, Status);
    pst.setDate(9, orderDateSQL);
    pst.setString(10, paymentStatus);
    pst.executeUpdate();

    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        orderId = generatedKeys.getInt(1);
    }

    
    if (paymentMethod.equals("Gcash") && paymentStatus.equals("Paid")) {
        pst = conn.prepareStatement("INSERT INTO gcash (OrderID, GCashName, GCashNumber, GCashAmount) VALUES (?, ?, ?, ?)");
        pst.setInt(1, orderId);
        pst.setString(2, gcashName);
        pst.setString(3, gcashNumber);
        pst.setDouble(4, amountGiven);
        pst.executeUpdate();
    }

   
    int newStock = currentStock - Quantity;
    pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductID = ?");
    pst.setInt(1, newStock);
    pst.setInt(2, productID);  
    pst.executeUpdate();

    BASQ.setText("");
    BASS.setText(String.valueOf(newStock));

    java.time.LocalDate deliveryDate = today.plusDays(3);
    java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy");
    String orderDateStr = today.format(formatter);
    String deliveryDateStr = deliveryDate.format(formatter);

    String receipt = "Product Name: " + ProductName +
                     "\nQuantity: " + Quantity +
                     "\nPayment Method: " + paymentMethod +
                     "\nTotal Product Price: P" + String.format("%.2f", TotalPrice);

    if (paymentMethod.equals("Gcash")) {
        if (paymentStatus.equals("Paid")) {
            receipt += "\nGcash Name: " + gcashName +
                       "\nGcash Number: " + gcashNumber +
                       "\nAmount Given: P" + amountGiven +
                       "\nChange: P" + change;
        } else {
            receipt += "\nPayment to be made via GCash upon confirmation.";
        }
    } else {
        receipt += "\nShipping Fee: P" + shippingFee;
    }

    receipt += "\nTotal: P" + finalTotal +
               "\nDelivery Address: " + deliveryAddress +
               "\nOrder Date: " + orderDateStr +
               "\nExpected Delivery Date: " + deliveryDateStr +
               "\nPayment Status: " + paymentStatus +
               "\n\nExpected delivery in 3 days.";

    JOptionPane.showMessageDialog(this, receipt, "Order Successful", JOptionPane.INFORMATION_MESSAGE);
    loadAllProductStocks();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_BASPCActionPerformed

    private void BASACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BASACActionPerformed
String ProductName = "Brown Armless Stool";
        int price = 350;
        int Quantity;
         try {
        Quantity = Integer.parseInt(BASQ.getText());
        
        int currentStock = 0;
        pst = conn.prepareStatement("SELECT Stock FROM products WHERE ProductName = ?");
        pst.setString(1, ProductName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentStock = rs.getInt("Stock");
        }

        if (Quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Not enough stock available. Only " + currentStock + " left.", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double TotalPrice = Quantity * price;
        int customerID = SessionManager.getCustomerID();

       
        pst = conn.prepareStatement("INSERT INTO addtocart (CustomerID, ProductName, Price, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?)");
        pst.setInt(1, customerID);
        pst.setString(2, ProductName);
        pst.setDouble(3, price);
        pst.setInt(4, Quantity);
        pst.setDouble(5, TotalPrice);
        int rowsInserted = pst.executeUpdate();

       
        int newStock = currentStock - Quantity;
        pst = conn.prepareStatement("UPDATE products SET Stock = ? WHERE ProductName = ?");
        pst.setInt(1, newStock);
        pst.setString(2, ProductName);
        pst.executeUpdate();

       
        BASS.setText(String.valueOf(newStock));
        BASQ.setText("");

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_BASACActionPerformed

    private void ExitButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButton1ActionPerformed
        TablesChairs obj = new TablesChairs();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_ExitButton1ActionPerformed

    private void WASQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WASQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WASQActionPerformed

    private void BASQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BASQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BASQActionPerformed

    private void BBSQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBSQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BBSQActionPerformed

    private void BSQQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSQQActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BSQQActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Stools.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Stools.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Stools.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Stools.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Stools().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BASAC;
    private javax.swing.JButton BASPC;
    private javax.swing.JTextField BASQ;
    private javax.swing.JTextField BASS;
    private javax.swing.JButton BBSAC;
    private javax.swing.JButton BBSPC;
    private javax.swing.JTextField BBSQ;
    private javax.swing.JTextField BBSS;
    private javax.swing.JButton BSAC;
    private javax.swing.JButton BSPC;
    private javax.swing.JTextField BSQQ;
    private javax.swing.JTextField BSQS;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton ExitButton1;
    private javax.swing.JButton WASAC;
    private javax.swing.JButton WASPC;
    private javax.swing.JTextField WASQ;
    private javax.swing.JTextField WASS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea10;
    private javax.swing.JTextArea jTextArea11;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    // End of variables declaration//GEN-END:variables
}
